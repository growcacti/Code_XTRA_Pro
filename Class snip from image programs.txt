File: /home/jh/Desktop/Local_Python/IMAGE_PHOTO_SCRIPTS_APPS/image_browser_merger.py
Name: ImageBrowserMerger
Type: Class
Description: No description available
Code:
class ImageBrowserMerger(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title("Image Browser and Merger")
        self.geometry("1200x800")

        # Frame for the listbox and image information
        self.frame_left = tk.Frame(self, width=300)
        self.frame_left.pack(side=tk.LEFT, fill=tk.Y, padx=10, pady=10)

        self.listbox = tk.Listbox(self.frame_left, selectmode=tk.MULTIPLE, width=50, height=30)
        self.listbox.pack(side=tk.TOP, fill=tk.BOTH, expand=True)
        self.listbox.bind("<<ListboxSelect>>", self.display_image_info)

        self.scrollbar = tk.Scrollbar(self.frame_left, command=self.listbox.yview)
        self.scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        self.listbox.config(yscrollcommand=self.scrollbar.set)

        self.info_label = tk.Label(self.frame_left, text="Image Info", anchor="w")
        self.info_label.pack(fill=tk.X, pady=5)

        # Canvas for displaying images
        self.canvas = tk.Canvas(self, width=800, height=600, bg="black")
        self.canvas.pack(side=tk.TOP, fill=tk.BOTH, expand=True)

        # Buttons for functionality
        self.frame_buttons = tk.Frame(self)
        self.frame_buttons.pack(side=tk.BOTTOM, fill=tk.X, pady=10)

        self.btn_browse = tk.Button(self.frame_buttons, text="Browse Directory", command=self.browse_directory)
        self.btn_browse.pack(side=tk.LEFT, padx=5)

        self.btn_add = tk.Button(self.frame_buttons, text="Add to Merge", command=self.add_selected_images)
        self.btn_add.pack(side=tk.LEFT, padx=5)

        self.btn_merge = tk.Button(self.frame_buttons, text="Merge Images", command=self.merge_images)
        self.btn_merge.pack(side=tk.LEFT, padx=5)

        self.btn_save = tk.Button(self.frame_buttons, text="Save Merged Image", command=self.save_merged_image)
        self.btn_save.pack(side=tk.LEFT, padx=5)

        self.images = []  # Store images for merging
        self.merged_image = None  # Store merged image
        self.image_paths = []  # Store paths of listed images

    def browse_directory(self):
        directory = filedialog.askdirectory()
        if not directory:
            return

        self.listbox.delete(0, tk.END)
        self.image_paths.clear()
        
        # Get image files recursively
        for ext in ('*.png', '*.jpg', '*.jpeg', '*.bmp', '*.gif', '*.tiff'):
            self.image_paths.extend(glob(os.path.join(directory, '**', ext), recursive=True))

        for image in self.image_paths:
            self.listbox.insert(tk.END, os.path.basename(image))

    def display_image_info(self, event):
        if not self.listbox.curselection():
            return

        index = self.listbox.curselection()[0]
        image_path = self.image_paths[index]
        
        file_size = os.path.getsize(image_path) / 1024  # File size in KB
        last_modified = time.ctime(os.path.getmtime(image_path))

        self.info_label.config(
            text=f"Path: {image_path}\nSize: {file_size:.2f} KB\nLast Modified: {last_modified}"
        )

        # Display the selected image on the canvas
        img = Image.open(image_path)
        img.thumbnail((800, 600))
        self.current_img = ImageTk.PhotoImage(img)
        self.canvas.create_image(400, 300, anchor=tk.CENTER, image=self.current_img)

    def add_selected_images(self):
        selected_indices = self.listbox.curselection()
        if not selected_indices:
            messagebox.showwarning("No Selection", "Please select images to add.")
            return

        for index in selected_indices:
            image_path = self.image_paths[index]
            image = Image.open(image_path)
            self.images.append(image)

        messagebox.showinfo("Added", f"{len(selected_indices)} images added for merging.")

    def merge_images(self):
        if len(self.images) < 2:
            messagebox.showwarning("Not Enough Images", "Select at least two images to merge.")
            return

        widths, heights = zip(*(img.size for img in self.images))
        total_width = sum(widths)
        max_height = max(heights)

        self.merged_image = Image.new("RGB", (total_width, max_height))

        x_offset = 0
        for img in self.images:
            self.merged_image.paste(img, (x_offset, 0))
            x_offset += img.width

        self.display_merged_image(self.merged_image)

    def display_merged_image(self, image):
        img = image.resize((800, 600))
        self.merged_tk_img = ImageTk.PhotoImage(img)
        self.canvas.create_image(400, 300, anchor=tk.CENTER, image=self.merged_tk_img)

    def save_merged_image(self):
        if not self.merged_image:
            messagebox.showwarning("No Merged Image", "No merged image to save.")
            return

        file_path = filedialog.asksaveasfilename(
            defaultextension=".jpg",
            filetypes=[("JPEG files", "*.jpg"), ("PNG files", "*.png")]
        )

        if file_path:
            self.merged_image.save(file_path)
            messagebox.showinfo("Success", "Merged image saved successfully!")
----------------------------------------

File: /home/jh/Desktop/Local_Python/IMAGE_PHOTO_SCRIPTS_APPS/image_browser_merger.py
Name: __init__
Type: Function
Description: No description available
Code:
    def __init__(self):
        super().__init__()
        self.title("Image Browser and Merger")
        self.geometry("1200x800")

        # Frame for the listbox and image information
        self.frame_left = tk.Frame(self, width=300)
        self.frame_left.pack(side=tk.LEFT, fill=tk.Y, padx=10, pady=10)

        self.listbox = tk.Listbox(self.frame_left, selectmode=tk.MULTIPLE, width=50, height=30)
        self.listbox.pack(side=tk.TOP, fill=tk.BOTH, expand=True)
        self.listbox.bind("<<ListboxSelect>>", self.display_image_info)

        self.scrollbar = tk.Scrollbar(self.frame_left, command=self.listbox.yview)
        self.scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        self.listbox.config(yscrollcommand=self.scrollbar.set)

        self.info_label = tk.Label(self.frame_left, text="Image Info", anchor="w")
        self.info_label.pack(fill=tk.X, pady=5)

        # Canvas for displaying images
        self.canvas = tk.Canvas(self, width=800, height=600, bg="black")
        self.canvas.pack(side=tk.TOP, fill=tk.BOTH, expand=True)

        # Buttons for functionality
        self.frame_buttons = tk.Frame(self)
        self.frame_buttons.pack(side=tk.BOTTOM, fill=tk.X, pady=10)

        self.btn_browse = tk.Button(self.frame_buttons, text="Browse Directory", command=self.browse_directory)
        self.btn_browse.pack(side=tk.LEFT, padx=5)

        self.btn_add = tk.Button(self.frame_buttons, text="Add to Merge", command=self.add_selected_images)
        self.btn_add.pack(side=tk.LEFT, padx=5)

        self.btn_merge = tk.Button(self.frame_buttons, text="Merge Images", command=self.merge_images)
        self.btn_merge.pack(side=tk.LEFT, padx=5)

        self.btn_save = tk.Button(self.frame_buttons, text="Save Merged Image", command=self.save_merged_image)
        self.btn_save.pack(side=tk.LEFT, padx=5)

        self.images = []  # Store images for merging
        self.merged_image = None  # Store merged image
        self.image_paths = []  # Store paths of listed images
----------------------------------------

File: /home/jh/Desktop/Local_Python/IMAGE_PHOTO_SCRIPTS_APPS/image_browser_merger.py
Name: browse_directory
Type: Function
Description: No description available
Code:
    def browse_directory(self):
        directory = filedialog.askdirectory()
        if not directory:
            return

        self.listbox.delete(0, tk.END)
        self.image_paths.clear()
        
        # Get image files recursively
        for ext in ('*.png', '*.jpg', '*.jpeg', '*.bmp', '*.gif', '*.tiff'):
            self.image_paths.extend(glob(os.path.join(directory, '**', ext), recursive=True))

        for image in self.image_paths:
            self.listbox.insert(tk.END, os.path.basename(image))
----------------------------------------

File: /home/jh/Desktop/Local_Python/IMAGE_PHOTO_SCRIPTS_APPS/image_browser_merger.py
Name: display_image_info
Type: Function
Description: No description available
Code:
    def display_image_info(self, event):
        if not self.listbox.curselection():
            return

        index = self.listbox.curselection()[0]
        image_path = self.image_paths[index]
        
        file_size = os.path.getsize(image_path) / 1024  # File size in KB
        last_modified = time.ctime(os.path.getmtime(image_path))

        self.info_label.config(
            text=f"Path: {image_path}\nSize: {file_size:.2f} KB\nLast Modified: {last_modified}"
        )

        # Display the selected image on the canvas
        img = Image.open(image_path)
        img.thumbnail((800, 600))
        self.current_img = ImageTk.PhotoImage(img)
        self.canvas.create_image(400, 300, anchor=tk.CENTER, image=self.current_img)
----------------------------------------

File: /home/jh/Desktop/Local_Python/IMAGE_PHOTO_SCRIPTS_APPS/image_browser_merger.py
Name: add_selected_images
Type: Function
Description: No description available
Code:
    def add_selected_images(self):
        selected_indices = self.listbox.curselection()
        if not selected_indices:
            messagebox.showwarning("No Selection", "Please select images to add.")
            return

        for index in selected_indices:
            image_path = self.image_paths[index]
            image = Image.open(image_path)
            self.images.append(image)

        messagebox.showinfo("Added", f"{len(selected_indices)} images added for merging.")
----------------------------------------

File: /home/jh/Desktop/Local_Python/IMAGE_PHOTO_SCRIPTS_APPS/image_browser_merger.py
Name: merge_images
Type: Function
Description: No description available
Code:
    def merge_images(self):
        if len(self.images) < 2:
            messagebox.showwarning("Not Enough Images", "Select at least two images to merge.")
            return

        widths, heights = zip(*(img.size for img in self.images))
        total_width = sum(widths)
        max_height = max(heights)

        self.merged_image = Image.new("RGB", (total_width, max_height))

        x_offset = 0
        for img in self.images:
            self.merged_image.paste(img, (x_offset, 0))
            x_offset += img.width

        self.display_merged_image(self.merged_image)
----------------------------------------

File: /home/jh/Desktop/Local_Python/IMAGE_PHOTO_SCRIPTS_APPS/image_browser_merger.py
Name: display_merged_image
Type: Function
Description: No description available
Code:
    def display_merged_image(self, image):
        img = image.resize((800, 600))
        self.merged_tk_img = ImageTk.PhotoImage(img)
        self.canvas.create_image(400, 300, anchor=tk.CENTER, image=self.merged_tk_img)
----------------------------------------

File: /home/jh/Desktop/Local_Python/IMAGE_PHOTO_SCRIPTS_APPS/image_browser_merger.py
Name: save_merged_image
Type: Function
Description: No description available
Code:
    def save_merged_image(self):
        if not self.merged_image:
            messagebox.showwarning("No Merged Image", "No merged image to save.")
            return

        file_path = filedialog.asksaveasfilename(
            defaultextension=".jpg",
            filetypes=[("JPEG files", "*.jpg"), ("PNG files", "*.png")]
        )

        if file_path:
            self.merged_image.save(file_path)
            messagebox.showinfo("Success", "Merged image saved successfully!")
----------------------------------------

File: /home/jh/Desktop/Local_Python/IMAGE_PHOTO_SCRIPTS_APPS/thumb_nailer_v5.py
Name: ImageToolApp
Type: Class
Description: No description available
Code:
class ImageToolApp(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title("Image Tool Suite")
        self.geometry("1400x800")

        # Initialize attributes
        self.image_paths = []
        self.selected_images = []
        self.current_img_path = None

        # Top frame for options
        self.frame_top = tk.Frame(self)
        self.frame_top.grid(row=0, column=0, columnspan=2, sticky="ew", padx=10, pady=10)

        self.btn_browse = tk.Button(self.frame_top, text="Select Directory", command=self.browse_directory)
        self.btn_browse.grid(row=0, column=0, padx=5)

        self.var_recursive = tk.BooleanVar()
        self.check_recursive = tk.Checkbutton(
            self.frame_top, text="Recursive View", variable=self.var_recursive, command=self.update_view
        )
        self.check_recursive.grid(row=0, column=1, padx=5)

        self.btn_view_full = tk.Button(self.frame_top, text="View Full Image", command=self.view_full_image)
        self.btn_view_full.grid(row=0, column=2, padx=5)

        self.btn_unselect = tk.Button(self.frame_top, text="Unselect", command=self.unselect_image)
        self.btn_unselect.grid(row=0, column=3, padx=5)

        self.btn_merge = tk.Button(self.frame_top, text="Merge Images", command=self.merge_images)
        self.btn_merge.grid(row=0, column=4, padx=5)

        self.btn_sprite = tk.Button(self.frame_top, text="Build Sprite Sheet", command=self.build_sprite_sheet)
        self.btn_sprite.grid(row=0, column=5, padx=5)

        # Frame for thumbnails
        self.frame_left = tk.Frame(self)
        self.frame_left.grid(row=1, column=0, sticky="nsew", pady=10)

        # Canvas for thumbnails
        self.canvas = tk.Canvas(self.frame_left, bg="white", bd=5)
        self.canvas.grid(row=0, column=0, sticky="nsew")

        self.scroll_y = tk.Scrollbar(self.frame_left, orient="vertical", command=self.canvas.yview)
        self.scroll_y.grid(row=0, column=1, sticky="ns")
        self.canvas.config(yscrollcommand=self.scroll_y.set)

        # Frame to hold thumbnails inside the canvas
        self.frame_thumbnails = tk.Frame(self.canvas)
        self.canvas.create_window((0, 0), window=self.frame_thumbnails, anchor="nw")

        # Progress bar for loading indication
        self.progress_label = tk.Label(self.frame_left,text="Below if loading  please wait...").grid(row=1,column=0)
        self.progress_bar = ttk.Progressbar(self.frame_left, orient="horizontal", length=400, mode="determinate")
        self.progress_bar.grid(row=3, column=0, columnspan=2, pady=5, sticky="ew")

        # Frame for file info
        self.frame_right = tk.Frame(self, width=300)
        self.frame_right.grid(row=1, column=1, sticky="nsew", padx=10, pady=10)

        self.lbl_info = tk.Label(self.frame_right, text="File Info", anchor="w")
        self.lbl_info.grid(row=0, column=0, sticky="w", pady=5)

        self.txt_info = tk.Text(self.frame_right, height=8, width=40, wrap="word")
        self.txt_info.grid(row=1, column=0, sticky="nsew")

        self.lbl_selected = tk.Label(self.frame_right, text="Selected Images")
        self.lbl_selected.grid(row=2, column=0, sticky="w", pady=5)

        self.listbox_selected = tk.Listbox(self.frame_right, height=15, width=40)
        self.listbox_selected.grid(row=3, column=0, sticky="nsew")

        # Grid weight configuration
        self.grid_rowconfigure(1, weight=1)
        self.grid_columnconfigure(0, weight=1)
        self.frame_left.grid_rowconfigure(0, weight=1)
        self.frame_left.grid_columnconfigure(0, weight=1)
        self.frame_right.grid_rowconfigure(1, weight=1)

    def browse_directory(self):
        directory = filedialog.askdirectory()
        if not directory:
            return

        self.image_paths.clear()
        self.canvas.delete("all")
        self.frame_thumbnails.destroy()
        self.frame_thumbnails = tk.Frame(self.canvas)
        self.canvas.create_window((0, 0), window=self.frame_thumbnails, anchor="nw")

        self.load_images(directory)

    def load_images(self, directory):
        extensions = ('*.png', '*.jpg', '*.jpeg', '*.bmp', '*.gif', '*.tiff')
        search_pattern = '**/*' if self.var_recursive.get() else '*'

        self.image_paths = []
        for ext in extensions:
            self.image_paths.extend(glob(os.path.join(directory, search_pattern, ext), recursive=self.var_recursive.get()))

        if not self.image_paths:
            messagebox.showinfo("No Images Found", "No images found in the selected directory.")
            return

        self.display_thumbnails()

    def display_thumbnails(self):
        self.progress_bar["maximum"] = len(self.image_paths)
        for idx, img_path in enumerate(self.image_paths):
            try:
                img = Image.open(img_path)
                img.thumbnail((100, 100))
                tk_img = ImageTk.PhotoImage(img)

                frame = tk.Frame(self.frame_thumbnails, bd=2, relief="ridge")
                frame.grid(row=idx // 6, column=idx % 6, padx=5, pady=5)

                lbl_img = tk.Label(frame, image=tk_img)
                lbl_img.image = tk_img  # Keep a reference to avoid garbage collection
                lbl_img.grid(row=0, column=0)

                lbl_info = tk.Label(frame, text=os.path.basename(img_path), wraplength=100, anchor="w")
                lbl_info.grid(row=1, column=0, sticky="ew")

                lbl_img.bind("<Enter>", lambda e, path=img_path: self.show_file_info(path))
                lbl_img.bind("<Button-1>", lambda e, path=img_path: self.select_image(path))
                lbl_img.bind("<Double-1>", lambda e, path=img_path: self.add_to_selection(path))

                # Update the progress bar
                self.progress_bar.step(1)
                self.progress_bar.update_idletasks()

            except Exception as e:
                print(f"Error loading image {img_path}: {e}")

        self.frame_thumbnails.update_idletasks()
        self.canvas.config(scrollregion=self.canvas.bbox("all"))
        self.progress_bar["value"] = 0  # Reset the progress bar

    def show_file_info(self, img_path):
        """Show file information when hovering over a thumbnail or clicking on 'View Full Image'."""
        file_size = os.path.getsize(img_path) / 1024  # File size in KB
        last_modified = time.ctime(os.path.getmtime(img_path))

        info_text = (
            f"Path: {img_path}\n"
            f"Size: {file_size:.2f} KB\n"
            f"Last Modified: {last_modified}"
        )

        self.txt_info.delete(1.0, tk.END)
        self.txt_info.insert(tk.END, info_text)
        self.current_img_path = img_path

    def select_image(self, img_path):
        """Select image to view full info."""
        self.show_file_info(img_path)
        self.current_img_path = img_path

    def add_to_selection(self, img_path):
        """Add image to the list of selected images for merging or sprite sheet."""
        if img_path not in self.selected_images:
            self.selected_images.append(img_path)
            self.listbox_selected.insert(tk.END, os.path.basename(img_path))
            messagebox.showinfo("Selected", f"{os.path.basename(img_path)} added to selection.")

    def unselect_image(self):
        """Remove selected image from the list of selected images."""
        selected_idx = self.listbox_selected.curselection()
        if not selected_idx:
            messagebox.showwarning("No Selection", "Select an image to unselect.")
            return

        selected_file = self.listbox_selected.get(selected_idx)
        self.listbox_selected.delete(selected_idx)
        self.selected_images = [img for img in self.selected_images if os.path.basename(img) != selected_file]

    def view_full_image(self):
        """Display the full-size image of the current selection."""
        if not self.current_img_path:
            messagebox.showwarning("No Image Selected", "Select an image to view.")
            return

        try:
            img = Image.open(self.current_img_path)
            top = tk.Toplevel(self)
            top.title("Full Image View")

            tk_img = ImageTk.PhotoImage(img)
            lbl_full_img = tk.Label(top, image=tk_img)
            lbl_full_img.image = tk_img  # Keep a reference
            lbl_full_img.pack()

            # Show file info when viewing the full image
            self.show_file_info(self.current_img_path)

        except Exception as e:
            messagebox.showerror("Error", f"Error opening image: {e}")

    def merge_images(self):
        """Merge selected images horizontally."""
        if len(self.selected_images) < 2:
            messagebox.showwarning("Not Enough Images", "Select at least two images to merge.")
            return

        images = [Image.open(img) for img in self.selected_images]
        total_width = sum(img.width for img in images)
        max_height = max(img.height for img in images)

        merged_image = Image.new('RGB', (total_width, max_height))
        x_offset = 0

        for img in images:
            merged_image.paste(img, (x_offset, 0))
            x_offset += img.width

        self.display_merged_image(merged_image)

    def display_merged_image(self, image):
        img = image.resize((800, 600))
        tk_img = ImageTk.PhotoImage(img)
        self.canvas.create_image(400, 300, anchor=tk.CENTER, image=tk_img)
        self.canvas.image = tk_img  # Keep a reference to avoid garbage collection

    def build_sprite_sheet(self):
        """Build a sprite sheet from selected images."""
        if not self.selected_images:
            messagebox.showwarning("No Images", "Select images to create a sprite sheet.")
            return

        try:
            columns = simpledialog.askinteger("Columns", "Enter number of columns:", minvalue=1)
            if not columns:
                return

            rows = (len(self.selected_images) + columns - 1) // columns
            img_width, img_height = Image.open(self.selected_images[0]).size

            sprite_sheet = Image.new('RGBA', (img_width * columns, img_height * rows))
            for idx, img_path in enumerate(self.selected_images):
                img = Image.open(img_path)
                row, col = divmod(idx, columns)
                sprite_sheet.paste(img, (col * img_width, row * img_height))

            self.display_merged_image(sprite_sheet)
            messagebox.showinfo("Sprite Sheet Complete", "Sprite sheet built successfully.")
        except Exception as e:
            messagebox.showerror("Error", str(e))

    def update_view(self):
        self.browse_directory()
----------------------------------------

File: /home/jh/Desktop/Local_Python/IMAGE_PHOTO_SCRIPTS_APPS/thumb_nailer_v5.py
Name: __init__
Type: Function
Description: No description available
Code:
    def __init__(self):
        super().__init__()
        self.title("Image Tool Suite")
        self.geometry("1400x800")

        # Initialize attributes
        self.image_paths = []
        self.selected_images = []
        self.current_img_path = None

        # Top frame for options
        self.frame_top = tk.Frame(self)
        self.frame_top.grid(row=0, column=0, columnspan=2, sticky="ew", padx=10, pady=10)

        self.btn_browse = tk.Button(self.frame_top, text="Select Directory", command=self.browse_directory)
        self.btn_browse.grid(row=0, column=0, padx=5)

        self.var_recursive = tk.BooleanVar()
        self.check_recursive = tk.Checkbutton(
            self.frame_top, text="Recursive View", variable=self.var_recursive, command=self.update_view
        )
        self.check_recursive.grid(row=0, column=1, padx=5)

        self.btn_view_full = tk.Button(self.frame_top, text="View Full Image", command=self.view_full_image)
        self.btn_view_full.grid(row=0, column=2, padx=5)

        self.btn_unselect = tk.Button(self.frame_top, text="Unselect", command=self.unselect_image)
        self.btn_unselect.grid(row=0, column=3, padx=5)

        self.btn_merge = tk.Button(self.frame_top, text="Merge Images", command=self.merge_images)
        self.btn_merge.grid(row=0, column=4, padx=5)

        self.btn_sprite = tk.Button(self.frame_top, text="Build Sprite Sheet", command=self.build_sprite_sheet)
        self.btn_sprite.grid(row=0, column=5, padx=5)

        # Frame for thumbnails
        self.frame_left = tk.Frame(self)
        self.frame_left.grid(row=1, column=0, sticky="nsew", pady=10)

        # Canvas for thumbnails
        self.canvas = tk.Canvas(self.frame_left, bg="white", bd=5)
        self.canvas.grid(row=0, column=0, sticky="nsew")

        self.scroll_y = tk.Scrollbar(self.frame_left, orient="vertical", command=self.canvas.yview)
        self.scroll_y.grid(row=0, column=1, sticky="ns")
        self.canvas.config(yscrollcommand=self.scroll_y.set)

        # Frame to hold thumbnails inside the canvas
        self.frame_thumbnails = tk.Frame(self.canvas)
        self.canvas.create_window((0, 0), window=self.frame_thumbnails, anchor="nw")

        # Progress bar for loading indication
        self.progress_label = tk.Label(self.frame_left,text="Below if loading  please wait...").grid(row=1,column=0)
        self.progress_bar = ttk.Progressbar(self.frame_left, orient="horizontal", length=400, mode="determinate")
        self.progress_bar.grid(row=3, column=0, columnspan=2, pady=5, sticky="ew")

        # Frame for file info
        self.frame_right = tk.Frame(self, width=300)
        self.frame_right.grid(row=1, column=1, sticky="nsew", padx=10, pady=10)

        self.lbl_info = tk.Label(self.frame_right, text="File Info", anchor="w")
        self.lbl_info.grid(row=0, column=0, sticky="w", pady=5)

        self.txt_info = tk.Text(self.frame_right, height=8, width=40, wrap="word")
        self.txt_info.grid(row=1, column=0, sticky="nsew")

        self.lbl_selected = tk.Label(self.frame_right, text="Selected Images")
        self.lbl_selected.grid(row=2, column=0, sticky="w", pady=5)

        self.listbox_selected = tk.Listbox(self.frame_right, height=15, width=40)
        self.listbox_selected.grid(row=3, column=0, sticky="nsew")

        # Grid weight configuration
        self.grid_rowconfigure(1, weight=1)
        self.grid_columnconfigure(0, weight=1)
        self.frame_left.grid_rowconfigure(0, weight=1)
        self.frame_left.grid_columnconfigure(0, weight=1)
        self.frame_right.grid_rowconfigure(1, weight=1)
----------------------------------------

File: /home/jh/Desktop/Local_Python/IMAGE_PHOTO_SCRIPTS_APPS/thumb_nailer_v5.py
Name: browse_directory
Type: Function
Description: No description available
Code:
    def browse_directory(self):
        directory = filedialog.askdirectory()
        if not directory:
            return

        self.image_paths.clear()
        self.canvas.delete("all")
        self.frame_thumbnails.destroy()
        self.frame_thumbnails = tk.Frame(self.canvas)
        self.canvas.create_window((0, 0), window=self.frame_thumbnails, anchor="nw")

        self.load_images(directory)
----------------------------------------

File: /home/jh/Desktop/Local_Python/IMAGE_PHOTO_SCRIPTS_APPS/thumb_nailer_v5.py
Name: load_images
Type: Function
Description: No description available
Code:
    def load_images(self, directory):
        extensions = ('*.png', '*.jpg', '*.jpeg', '*.bmp', '*.gif', '*.tiff')
        search_pattern = '**/*' if self.var_recursive.get() else '*'

        self.image_paths = []
        for ext in extensions:
            self.image_paths.extend(glob(os.path.join(directory, search_pattern, ext), recursive=self.var_recursive.get()))

        if not self.image_paths:
            messagebox.showinfo("No Images Found", "No images found in the selected directory.")
            return

        self.display_thumbnails()
----------------------------------------

File: /home/jh/Desktop/Local_Python/IMAGE_PHOTO_SCRIPTS_APPS/thumb_nailer_v5.py
Name: display_thumbnails
Type: Function
Description: No description available
Code:
    def display_thumbnails(self):
        self.progress_bar["maximum"] = len(self.image_paths)
        for idx, img_path in enumerate(self.image_paths):
            try:
                img = Image.open(img_path)
                img.thumbnail((100, 100))
                tk_img = ImageTk.PhotoImage(img)

                frame = tk.Frame(self.frame_thumbnails, bd=2, relief="ridge")
                frame.grid(row=idx // 6, column=idx % 6, padx=5, pady=5)

                lbl_img = tk.Label(frame, image=tk_img)
                lbl_img.image = tk_img  # Keep a reference to avoid garbage collection
                lbl_img.grid(row=0, column=0)

                lbl_info = tk.Label(frame, text=os.path.basename(img_path), wraplength=100, anchor="w")
                lbl_info.grid(row=1, column=0, sticky="ew")

                lbl_img.bind("<Enter>", lambda e, path=img_path: self.show_file_info(path))
                lbl_img.bind("<Button-1>", lambda e, path=img_path: self.select_image(path))
                lbl_img.bind("<Double-1>", lambda e, path=img_path: self.add_to_selection(path))

                # Update the progress bar
                self.progress_bar.step(1)
                self.progress_bar.update_idletasks()

            except Exception as e:
                print(f"Error loading image {img_path}: {e}")

        self.frame_thumbnails.update_idletasks()
        self.canvas.config(scrollregion=self.canvas.bbox("all"))
        self.progress_bar["value"] = 0  # Reset the progress bar
----------------------------------------

File: /home/jh/Desktop/Local_Python/IMAGE_PHOTO_SCRIPTS_APPS/thumb_nailer_v5.py
Name: show_file_info
Type: Function
Description: Show file information when hovering over a thumbnail or clicking on 'View Full Image'.
Code:
    def show_file_info(self, img_path):
        """Show file information when hovering over a thumbnail or clicking on 'View Full Image'."""
        file_size = os.path.getsize(img_path) / 1024  # File size in KB
        last_modified = time.ctime(os.path.getmtime(img_path))

        info_text = (
            f"Path: {img_path}\n"
            f"Size: {file_size:.2f} KB\n"
            f"Last Modified: {last_modified}"
        )

        self.txt_info.delete(1.0, tk.END)
        self.txt_info.insert(tk.END, info_text)
        self.current_img_path = img_path
----------------------------------------

File: /home/jh/Desktop/Local_Python/IMAGE_PHOTO_SCRIPTS_APPS/thumb_nailer_v5.py
Name: select_image
Type: Function
Description: Select image to view full info.
Code:
    def select_image(self, img_path):
        """Select image to view full info."""
        self.show_file_info(img_path)
        self.current_img_path = img_path
----------------------------------------

File: /home/jh/Desktop/Local_Python/IMAGE_PHOTO_SCRIPTS_APPS/thumb_nailer_v5.py
Name: add_to_selection
Type: Function
Description: Add image to the list of selected images for merging or sprite sheet.
Code:
    def add_to_selection(self, img_path):
        """Add image to the list of selected images for merging or sprite sheet."""
        if img_path not in self.selected_images:
            self.selected_images.append(img_path)
            self.listbox_selected.insert(tk.END, os.path.basename(img_path))
            messagebox.showinfo("Selected", f"{os.path.basename(img_path)} added to selection.")
----------------------------------------

File: /home/jh/Desktop/Local_Python/IMAGE_PHOTO_SCRIPTS_APPS/thumb_nailer_v5.py
Name: unselect_image
Type: Function
Description: Remove selected image from the list of selected images.
Code:
    def unselect_image(self):
        """Remove selected image from the list of selected images."""
        selected_idx = self.listbox_selected.curselection()
        if not selected_idx:
            messagebox.showwarning("No Selection", "Select an image to unselect.")
            return

        selected_file = self.listbox_selected.get(selected_idx)
        self.listbox_selected.delete(selected_idx)
        self.selected_images = [img for img in self.selected_images if os.path.basename(img) != selected_file]
----------------------------------------

File: /home/jh/Desktop/Local_Python/IMAGE_PHOTO_SCRIPTS_APPS/thumb_nailer_v5.py
Name: view_full_image
Type: Function
Description: Display the full-size image of the current selection.
Code:
    def view_full_image(self):
        """Display the full-size image of the current selection."""
        if not self.current_img_path:
            messagebox.showwarning("No Image Selected", "Select an image to view.")
            return

        try:
            img = Image.open(self.current_img_path)
            top = tk.Toplevel(self)
            top.title("Full Image View")

            tk_img = ImageTk.PhotoImage(img)
            lbl_full_img = tk.Label(top, image=tk_img)
            lbl_full_img.image = tk_img  # Keep a reference
            lbl_full_img.pack()

            # Show file info when viewing the full image
            self.show_file_info(self.current_img_path)

        except Exception as e:
            messagebox.showerror("Error", f"Error opening image: {e}")
----------------------------------------

File: /home/jh/Desktop/Local_Python/IMAGE_PHOTO_SCRIPTS_APPS/thumb_nailer_v5.py
Name: merge_images
Type: Function
Description: Merge selected images horizontally.
Code:
    def merge_images(self):
        """Merge selected images horizontally."""
        if len(self.selected_images) < 2:
            messagebox.showwarning("Not Enough Images", "Select at least two images to merge.")
            return

        images = [Image.open(img) for img in self.selected_images]
        total_width = sum(img.width for img in images)
        max_height = max(img.height for img in images)

        merged_image = Image.new('RGB', (total_width, max_height))
        x_offset = 0

        for img in images:
            merged_image.paste(img, (x_offset, 0))
            x_offset += img.width

        self.display_merged_image(merged_image)
----------------------------------------

File: /home/jh/Desktop/Local_Python/IMAGE_PHOTO_SCRIPTS_APPS/thumb_nailer_v5.py
Name: display_merged_image
Type: Function
Description: No description available
Code:
    def display_merged_image(self, image):
        img = image.resize((800, 600))
        tk_img = ImageTk.PhotoImage(img)
        self.canvas.create_image(400, 300, anchor=tk.CENTER, image=tk_img)
        self.canvas.image = tk_img  # Keep a reference to avoid garbage collection
----------------------------------------

File: /home/jh/Desktop/Local_Python/IMAGE_PHOTO_SCRIPTS_APPS/thumb_nailer_v5.py
Name: build_sprite_sheet
Type: Function
Description: Build a sprite sheet from selected images.
Code:
    def build_sprite_sheet(self):
        """Build a sprite sheet from selected images."""
        if not self.selected_images:
            messagebox.showwarning("No Images", "Select images to create a sprite sheet.")
            return

        try:
            columns = simpledialog.askinteger("Columns", "Enter number of columns:", minvalue=1)
            if not columns:
                return

            rows = (len(self.selected_images) + columns - 1) // columns
            img_width, img_height = Image.open(self.selected_images[0]).size

            sprite_sheet = Image.new('RGBA', (img_width * columns, img_height * rows))
            for idx, img_path in enumerate(self.selected_images):
                img = Image.open(img_path)
                row, col = divmod(idx, columns)
                sprite_sheet.paste(img, (col * img_width, row * img_height))

            self.display_merged_image(sprite_sheet)
            messagebox.showinfo("Sprite Sheet Complete", "Sprite sheet built successfully.")
        except Exception as e:
            messagebox.showerror("Error", str(e))
----------------------------------------

File: /home/jh/Desktop/Local_Python/IMAGE_PHOTO_SCRIPTS_APPS/thumb_nailer_v5.py
Name: update_view
Type: Function
Description: No description available
Code:
    def update_view(self):
        self.browse_directory()
----------------------------------------

File: /home/jh/Desktop/Local_Python/IMAGE_PHOTO_SCRIPTS_APPS/thumbnailerv3.py
Name: ImageToolApp
Type: Class
Description: No description available
Code:
class ImageToolApp(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title("Image Tool Suite")
        self.geometry("1400x800")

        # Initialize attributes
        self.image_paths = []
        self.selected_images = []  # To store selected images for merging or sprite sheet

        # Top frame for options
        self.frame_top = tk.Frame(self)
        self.frame_top.pack(fill=tk.X, padx=10, pady=10)

        self.btn_browse = tk.Button(self.frame_top, text="Select Directory", command=self.browse_directory)
        self.btn_browse.pack(side=tk.LEFT, padx=5)

        self.var_recursive = tk.BooleanVar()
        self.check_recursive = tk.Checkbutton(
            self.frame_top, text="Recursive View", variable=self.var_recursive, command=self.update_view
        )
        self.check_recursive.pack(side=tk.LEFT, padx=5)
        self.btn_resize = tk.Button(self.frame_top, text="Resize Images", command=self.resize_images)
        self.btn_resize.pack(side=tk.LEFT, padx=5)

        self.btn_merge = tk.Button(self.frame_top, text="Merge Images", command=self.merge_images)
        self.btn_merge.pack(side=tk.LEFT, padx=5)

        self.btn_sprite = tk.Button(self.frame_top, text="Build Sprite Sheet", command=self.build_sprite_sheet)
        self.btn_sprite.pack(side=tk.LEFT, padx=5)

        self.btn_unselect = tk.Button(self.frame_top, text="Unselect", command=self.unselect_image)
        self.btn_unselect.pack(side=tk.LEFT, padx=5)

        # Frame for thumbnails and info
        self.frame_left = tk.Frame(self)
        self.frame_left.pack(side=tk.LEFT, fill=tk.Y, padx=10, pady=10)


        self.btn_view_full = tk.Button(self.frame_top, text="View Full Image", command=self.view_full_image)
        self.btn_view_full.pack(side=tk.LEFT, padx=5)

        # Frame for thumbnails and info
        self.frame_left = tk.Frame(self)
        self.frame_left.pack(side=tk.LEFT, fill=tk.Y, padx=10, pady=10)

        # Canvas for thumbnails
        self.canvas = tk.Canvas(self.frame_left, bg="white", bd=11, width=800, height=40)
        self.canvas.pack(side=tk.TOP, fill=tk.BOTH, expand=True)

        self.scroll_y = tk.Scrollbar(self.frame_left, orient="vertical", command=self.canvas.yview)
        self.scroll_y.pack(side=tk.RIGHT, fill=tk.Y)
        self.canvas.config(yscrollcommand=self.scroll_y.set)

        # Frame to hold thumbnails inside the canvas
        self.frame_thumbnails = tk.Frame(self.canvas)
        self.canvas.create_window((0, 0), window=self.frame_thumbnails, anchor="nw")
        
        # Frame for selected images and file info
        self.frame_right = tk.Frame(self, width=300)
        self.frame_right.pack(side=tk.RIGHT, fill=tk.Y, padx=10, pady=10)

        self.lbl_selected = tk.Label(self.frame_right, text="Selected Images")
        self.lbl_selected.pack(anchor="w")

        self.listbox_selected = tk.Listbox(self.frame_right, height=15, width=40)
        self.listbox_selected.pack(fill=tk.BOTH, expand=True, pady=5)

        
        # Progress bar for loading indication
        self.progress_bar = ttk.Progressbar(self.frame_left, orient="horizontal", length=400, mode="determinate")
        self.progress_bar.pack(pady=5)

        # Frame for file info
        self.frame_right = tk.Frame(self, width=300)
        self.frame_right.pack(side=tk.RIGHT, fill=tk.Y, padx=10, pady=10)

        self.lbl_info = tk.Label(self.frame_right, text="File Info", anchor="w")
        self.lbl_info.pack(anchor="w", pady=5)

        self.txt_info = tk.Text(self.frame_right, height=8, width=40, wrap="word")
        self.txt_info.pack(fill=tk.BOTH, expand=True)

    def browse_directory(self):
        directory = filedialog.askdirectory()
        if not directory:
            return

        self.image_paths.clear()
        self.canvas.delete("all")
        self.frame_thumbnails.destroy()
        self.frame_thumbnails = tk.Frame(self.canvas)
        self.canvas.create_window((0, 0), window=self.frame_thumbnails, anchor="nw")

        self.load_images(directory)

    def load_images(self, directory):
        extensions = ('*.png', '*.jpg', '*.jpeg', '*.bmp', '*.gif', '*.tiff')
        search_pattern = '**/*' if self.var_recursive.get() else '*'

        self.image_paths = []
        for ext in extensions:
            self.image_paths.extend(glob(os.path.join(directory, search_pattern, ext), recursive=self.var_recursive.get()))

        if not self.image_paths:
            messagebox.showinfo("No Images Found", "No images found in the selected directory.")
            return

        self.display_thumbnails()

    def display_thumbnails(self):
        self.progress_bar["maximum"] = len(self.image_paths)
        for idx, img_path in enumerate(self.image_paths):
            try:
                img = Image.open(img_path)
                img.thumbnail((100, 100))
                tk_img = ImageTk.PhotoImage(img)

                frame = tk.Frame(self.frame_thumbnails, bd=2, relief="ridge")
                frame.grid(row=idx // 6, column=idx % 6, padx=5, pady=5)

                lbl_img = tk.Label(frame, image=tk_img)
                lbl_img.image = tk_img  # Keep a reference to avoid garbage collection
                lbl_img.pack()

                lbl_info = tk.Label(frame, text=os.path.basename(img_path), wraplength=100, anchor="w")
                lbl_info.pack(fill=tk.X)

                lbl_img.bind("<Double-1>", lambda e, path=img_path: self.select_image(path))
                lbl_img.bind("<Enter>", lambda e, path=img_path: self.show_file_info(path))

                # Update the progress bar
                self.progress_bar.step(1)
                self.progress_bar.update_idletasks()

            except Exception as e:
                print(f"Error loading image {img_path}: {e}")

        self.frame_thumbnails.update_idletasks()
        self.canvas.config(scrollregion=self.canvas.bbox("all"))
        self.progress_bar["value"] = 0  # Reset the progress bar

    def select_image(self, img_path):
        self.show_file_info(img_path)

    def show_file_info(self, img_path):
        file_size = os.path.getsize(img_path) / 1024  # File size in KB
        last_modified = time.ctime(os.path.getmtime(img_path))

        info_text = (
            f"Path: {img_path}\n"
            f"Size: {file_size:.2f} KB\n"
            f"Last Modified: {last_modified}"
        )

        self.txt_info.delete(1.0, tk.END)
        self.txt_info.insert(tk.END, info_text)
        self.current_img_path = img_path

    def view_full_image(self):
        try:
            if not hasattr(self, 'current_img_path') or not self.current_img_path:
                messagebox.showwarning("No Image Selected", "Select an image to view.")
                return

            img = Image.open(self.current_img_path)
            top = tk.Toplevel(self)
            top.title("Full Image View")

            img_width, img_height = img.size
            tk_img = ImageTk.PhotoImage(img)

            lbl_full_img = tk.Label(top, image=tk_img)
            lbl_full_img.image = tk_img  # Keep a reference
            lbl_full_img.pack()

        except Exception as e:
            messagebox.showerror("Error", f"Error opening image: {e}")

    def update_view(self):
        self.browse_directory()


    def select_image(self, img_path):
        """Adds image to the selected images list for merging or sprite sheet."""
        if img_path not in self.selected_images:
            self.selected_images.append(img_path)
            self.listbox_selected.insert(tk.END, os.path.basename(img_path))
            messagebox.showinfo("Selected", f"{os.path.basename(img_path)} added to the selection.")

    def unselect_image(self):
        """Removes selected image from the list of selected images."""
        selected_idx = self.listbox_selected.curselection()
        if not selected_idx:
            messagebox.showwarning("No Selection", "Select an image to unselect.")
            return

        selected_file = self.listbox_selected.get(selected_idx)
        self.listbox_selected.delete(selected_idx)
        self.selected_images = [img for img in self.selected_images if os.path.basename(img) != selected_file]
        messagebox.showinfo("Unselected", f"{selected_file} removed from the selection.")

    def show_file_info(self, img_path):
        """Displays detailed information of the highlighted image."""
        file_size = os.path.getsize(img_path) / 1024  # File size in KB
        last_modified = time.ctime(os.path.getmtime(img_path))

        info_text = (
            f"Path: {img_path}\n"
            f"Size: {file_size:.2f} KB\n"
            f"Last Modified: {last_modified}"
        )

        self.txt_info.delete(1.0, tk.END)
        self.txt_info.insert(tk.END, info_text)

    def update_view(self):
        """Reload images when the recursive view option is toggled."""
        self.browse_directory()

    def resize_images(self):
        if not self.image_paths:
            messagebox.showwarning("No Images", "No images to resize.")
            return

        resize_factor = simpledialog.askfloat("Resize Factor", "Enter resize factor (e.g., 0.8 for 80%):", minvalue=0.1, maxvalue=1.0)
        if resize_factor is None:
            return

        output_folder = os.path.join(os.path.dirname(self.image_paths[0]), f'resized_output_{int(time.time())}')
        os.makedirs(output_folder, exist_ok=True)

        for img_path in self.image_paths:
            try:
                img = Image.open(img_path)
                new_size = (int(img.width * resize_factor), int(img.height * resize_factor))
                resized_img = img.resize(new_size, Image.Resampling.LANCZOS)
                resized_img.save(os.path.join(output_folder, os.path.basename(img_path)))
                print(f"Resized and saved: {os.path.basename(img_path)}")
            except Exception as e:
                print(f"Error resizing image {os.path.basename(img_path)}: {e}")

        messagebox.showinfo("Resizing Complete", f"Images resized and saved to {output_folder}.")

    def merge_images(self):
        if len(self.selected_images) < 2:
            messagebox.showwarning("Not Enough Images", "Select at least two images to merge.")
            return

        images = [Image.open(img) for img in self.selected_images]
        total_width = sum(img.width for img in images)
        max_height = max(img.height for img in images)

        self.merged_image = Image.new('RGB', (total_width, max_height))
        x_offset = 0

        for img in images:
            self.merged_image.paste(img, (x_offset, 0))
            x_offset += img.width

        self.display_merged_image(self.merged_image)

    def display_merged_image(self, image):
        img = image.resize((800, 600))
        tk_img = ImageTk.PhotoImage(img)
        self.canvas.create_image(400, 300, anchor=tk.CENTER, image=tk_img)
        self.canvas.image = tk_img  # Keep a reference to avoid garbage collection

    def build_sprite_sheet(self):
        if not self.selected_images:
            messagebox.showwarning("No Images", "Select images to create a sprite sheet.")
            return

        try:
            columns = simpledialog.askinteger("Columns", "Enter number of columns:", minvalue=1)
            if not columns:
                return

            rows = (len(self.selected_images) + columns - 1) // columns
            img_width, img_height = Image.open(self.selected_images[0]).size

            self.sprite_sheet = Image.new('RGBA', (img_width * columns, img_height * rows))
            for idx, img_path in enumerate(self.selected_images):
                img = Image.open(img_path)
                row, col = divmod(idx, columns)
                self.sprite_sheet.paste(img, (col * img_width, row * img_height))

            self.display_merged_image(self.sprite_sheet)
            messagebox.showinfo("Sprite Sheet Complete", "Sprite sheet built successfully.")
        except Exception as e:
            messagebox.showerror("Error", str(e))
----------------------------------------

File: /home/jh/Desktop/Local_Python/IMAGE_PHOTO_SCRIPTS_APPS/thumbnailerv3.py
Name: __init__
Type: Function
Description: No description available
Code:
    def __init__(self):
        super().__init__()
        self.title("Image Tool Suite")
        self.geometry("1400x800")

        # Initialize attributes
        self.image_paths = []
        self.selected_images = []  # To store selected images for merging or sprite sheet

        # Top frame for options
        self.frame_top = tk.Frame(self)
        self.frame_top.pack(fill=tk.X, padx=10, pady=10)

        self.btn_browse = tk.Button(self.frame_top, text="Select Directory", command=self.browse_directory)
        self.btn_browse.pack(side=tk.LEFT, padx=5)

        self.var_recursive = tk.BooleanVar()
        self.check_recursive = tk.Checkbutton(
            self.frame_top, text="Recursive View", variable=self.var_recursive, command=self.update_view
        )
        self.check_recursive.pack(side=tk.LEFT, padx=5)
        self.btn_resize = tk.Button(self.frame_top, text="Resize Images", command=self.resize_images)
        self.btn_resize.pack(side=tk.LEFT, padx=5)

        self.btn_merge = tk.Button(self.frame_top, text="Merge Images", command=self.merge_images)
        self.btn_merge.pack(side=tk.LEFT, padx=5)

        self.btn_sprite = tk.Button(self.frame_top, text="Build Sprite Sheet", command=self.build_sprite_sheet)
        self.btn_sprite.pack(side=tk.LEFT, padx=5)

        self.btn_unselect = tk.Button(self.frame_top, text="Unselect", command=self.unselect_image)
        self.btn_unselect.pack(side=tk.LEFT, padx=5)

        # Frame for thumbnails and info
        self.frame_left = tk.Frame(self)
        self.frame_left.pack(side=tk.LEFT, fill=tk.Y, padx=10, pady=10)


        self.btn_view_full = tk.Button(self.frame_top, text="View Full Image", command=self.view_full_image)
        self.btn_view_full.pack(side=tk.LEFT, padx=5)

        # Frame for thumbnails and info
        self.frame_left = tk.Frame(self)
        self.frame_left.pack(side=tk.LEFT, fill=tk.Y, padx=10, pady=10)

        # Canvas for thumbnails
        self.canvas = tk.Canvas(self.frame_left, bg="white", bd=11, width=800, height=40)
        self.canvas.pack(side=tk.TOP, fill=tk.BOTH, expand=True)

        self.scroll_y = tk.Scrollbar(self.frame_left, orient="vertical", command=self.canvas.yview)
        self.scroll_y.pack(side=tk.RIGHT, fill=tk.Y)
        self.canvas.config(yscrollcommand=self.scroll_y.set)

        # Frame to hold thumbnails inside the canvas
        self.frame_thumbnails = tk.Frame(self.canvas)
        self.canvas.create_window((0, 0), window=self.frame_thumbnails, anchor="nw")
        
        # Frame for selected images and file info
        self.frame_right = tk.Frame(self, width=300)
        self.frame_right.pack(side=tk.RIGHT, fill=tk.Y, padx=10, pady=10)

        self.lbl_selected = tk.Label(self.frame_right, text="Selected Images")
        self.lbl_selected.pack(anchor="w")

        self.listbox_selected = tk.Listbox(self.frame_right, height=15, width=40)
        self.listbox_selected.pack(fill=tk.BOTH, expand=True, pady=5)

        
        # Progress bar for loading indication
        self.progress_bar = ttk.Progressbar(self.frame_left, orient="horizontal", length=400, mode="determinate")
        self.progress_bar.pack(pady=5)

        # Frame for file info
        self.frame_right = tk.Frame(self, width=300)
        self.frame_right.pack(side=tk.RIGHT, fill=tk.Y, padx=10, pady=10)

        self.lbl_info = tk.Label(self.frame_right, text="File Info", anchor="w")
        self.lbl_info.pack(anchor="w", pady=5)

        self.txt_info = tk.Text(self.frame_right, height=8, width=40, wrap="word")
        self.txt_info.pack(fill=tk.BOTH, expand=True)
----------------------------------------

File: /home/jh/Desktop/Local_Python/IMAGE_PHOTO_SCRIPTS_APPS/thumbnailerv3.py
Name: browse_directory
Type: Function
Description: No description available
Code:
    def browse_directory(self):
        directory = filedialog.askdirectory()
        if not directory:
            return

        self.image_paths.clear()
        self.canvas.delete("all")
        self.frame_thumbnails.destroy()
        self.frame_thumbnails = tk.Frame(self.canvas)
        self.canvas.create_window((0, 0), window=self.frame_thumbnails, anchor="nw")

        self.load_images(directory)
----------------------------------------

File: /home/jh/Desktop/Local_Python/IMAGE_PHOTO_SCRIPTS_APPS/thumbnailerv3.py
Name: load_images
Type: Function
Description: No description available
Code:
    def load_images(self, directory):
        extensions = ('*.png', '*.jpg', '*.jpeg', '*.bmp', '*.gif', '*.tiff')
        search_pattern = '**/*' if self.var_recursive.get() else '*'

        self.image_paths = []
        for ext in extensions:
            self.image_paths.extend(glob(os.path.join(directory, search_pattern, ext), recursive=self.var_recursive.get()))

        if not self.image_paths:
            messagebox.showinfo("No Images Found", "No images found in the selected directory.")
            return

        self.display_thumbnails()
----------------------------------------

File: /home/jh/Desktop/Local_Python/IMAGE_PHOTO_SCRIPTS_APPS/thumbnailerv3.py
Name: display_thumbnails
Type: Function
Description: No description available
Code:
    def display_thumbnails(self):
        self.progress_bar["maximum"] = len(self.image_paths)
        for idx, img_path in enumerate(self.image_paths):
            try:
                img = Image.open(img_path)
                img.thumbnail((100, 100))
                tk_img = ImageTk.PhotoImage(img)

                frame = tk.Frame(self.frame_thumbnails, bd=2, relief="ridge")
                frame.grid(row=idx // 6, column=idx % 6, padx=5, pady=5)

                lbl_img = tk.Label(frame, image=tk_img)
                lbl_img.image = tk_img  # Keep a reference to avoid garbage collection
                lbl_img.pack()

                lbl_info = tk.Label(frame, text=os.path.basename(img_path), wraplength=100, anchor="w")
                lbl_info.pack(fill=tk.X)

                lbl_img.bind("<Double-1>", lambda e, path=img_path: self.select_image(path))
                lbl_img.bind("<Enter>", lambda e, path=img_path: self.show_file_info(path))

                # Update the progress bar
                self.progress_bar.step(1)
                self.progress_bar.update_idletasks()

            except Exception as e:
                print(f"Error loading image {img_path}: {e}")

        self.frame_thumbnails.update_idletasks()
        self.canvas.config(scrollregion=self.canvas.bbox("all"))
        self.progress_bar["value"] = 0  # Reset the progress bar
----------------------------------------

File: /home/jh/Desktop/Local_Python/IMAGE_PHOTO_SCRIPTS_APPS/thumbnailerv3.py
Name: select_image
Type: Function
Description: No description available
Code:
    def select_image(self, img_path):
        self.show_file_info(img_path)
----------------------------------------

File: /home/jh/Desktop/Local_Python/IMAGE_PHOTO_SCRIPTS_APPS/thumbnailerv3.py
Name: show_file_info
Type: Function
Description: No description available
Code:
    def show_file_info(self, img_path):
        file_size = os.path.getsize(img_path) / 1024  # File size in KB
        last_modified = time.ctime(os.path.getmtime(img_path))

        info_text = (
            f"Path: {img_path}\n"
            f"Size: {file_size:.2f} KB\n"
            f"Last Modified: {last_modified}"
        )

        self.txt_info.delete(1.0, tk.END)
        self.txt_info.insert(tk.END, info_text)
        self.current_img_path = img_path
----------------------------------------

File: /home/jh/Desktop/Local_Python/IMAGE_PHOTO_SCRIPTS_APPS/thumbnailerv3.py
Name: view_full_image
Type: Function
Description: No description available
Code:
    def view_full_image(self):
        try:
            if not hasattr(self, 'current_img_path') or not self.current_img_path:
                messagebox.showwarning("No Image Selected", "Select an image to view.")
                return

            img = Image.open(self.current_img_path)
            top = tk.Toplevel(self)
            top.title("Full Image View")

            img_width, img_height = img.size
            tk_img = ImageTk.PhotoImage(img)

            lbl_full_img = tk.Label(top, image=tk_img)
            lbl_full_img.image = tk_img  # Keep a reference
            lbl_full_img.pack()

        except Exception as e:
            messagebox.showerror("Error", f"Error opening image: {e}")
----------------------------------------

File: /home/jh/Desktop/Local_Python/IMAGE_PHOTO_SCRIPTS_APPS/thumbnailerv3.py
Name: update_view
Type: Function
Description: No description available
Code:
    def update_view(self):
        self.browse_directory()
----------------------------------------

File: /home/jh/Desktop/Local_Python/IMAGE_PHOTO_SCRIPTS_APPS/thumbnailerv3.py
Name: select_image
Type: Function
Description: Adds image to the selected images list for merging or sprite sheet.
Code:
    def select_image(self, img_path):
        """Adds image to the selected images list for merging or sprite sheet."""
        if img_path not in self.selected_images:
            self.selected_images.append(img_path)
            self.listbox_selected.insert(tk.END, os.path.basename(img_path))
            messagebox.showinfo("Selected", f"{os.path.basename(img_path)} added to the selection.")
----------------------------------------

File: /home/jh/Desktop/Local_Python/IMAGE_PHOTO_SCRIPTS_APPS/thumbnailerv3.py
Name: unselect_image
Type: Function
Description: Removes selected image from the list of selected images.
Code:
    def unselect_image(self):
        """Removes selected image from the list of selected images."""
        selected_idx = self.listbox_selected.curselection()
        if not selected_idx:
            messagebox.showwarning("No Selection", "Select an image to unselect.")
            return

        selected_file = self.listbox_selected.get(selected_idx)
        self.listbox_selected.delete(selected_idx)
        self.selected_images = [img for img in self.selected_images if os.path.basename(img) != selected_file]
        messagebox.showinfo("Unselected", f"{selected_file} removed from the selection.")
----------------------------------------

File: /home/jh/Desktop/Local_Python/IMAGE_PHOTO_SCRIPTS_APPS/thumbnailerv3.py
Name: show_file_info
Type: Function
Description: Displays detailed information of the highlighted image.
Code:
    def show_file_info(self, img_path):
        """Displays detailed information of the highlighted image."""
        file_size = os.path.getsize(img_path) / 1024  # File size in KB
        last_modified = time.ctime(os.path.getmtime(img_path))

        info_text = (
            f"Path: {img_path}\n"
            f"Size: {file_size:.2f} KB\n"
            f"Last Modified: {last_modified}"
        )

        self.txt_info.delete(1.0, tk.END)
        self.txt_info.insert(tk.END, info_text)
----------------------------------------

File: /home/jh/Desktop/Local_Python/IMAGE_PHOTO_SCRIPTS_APPS/thumbnailerv3.py
Name: update_view
Type: Function
Description: Reload images when the recursive view option is toggled.
Code:
    def update_view(self):
        """Reload images when the recursive view option is toggled."""
        self.browse_directory()
----------------------------------------

File: /home/jh/Desktop/Local_Python/IMAGE_PHOTO_SCRIPTS_APPS/thumbnailerv3.py
Name: resize_images
Type: Function
Description: No description available
Code:
    def resize_images(self):
        if not self.image_paths:
            messagebox.showwarning("No Images", "No images to resize.")
            return

        resize_factor = simpledialog.askfloat("Resize Factor", "Enter resize factor (e.g., 0.8 for 80%):", minvalue=0.1, maxvalue=1.0)
        if resize_factor is None:
            return

        output_folder = os.path.join(os.path.dirname(self.image_paths[0]), f'resized_output_{int(time.time())}')
        os.makedirs(output_folder, exist_ok=True)

        for img_path in self.image_paths:
            try:
                img = Image.open(img_path)
                new_size = (int(img.width * resize_factor), int(img.height * resize_factor))
                resized_img = img.resize(new_size, Image.Resampling.LANCZOS)
                resized_img.save(os.path.join(output_folder, os.path.basename(img_path)))
                print(f"Resized and saved: {os.path.basename(img_path)}")
            except Exception as e:
                print(f"Error resizing image {os.path.basename(img_path)}: {e}")

        messagebox.showinfo("Resizing Complete", f"Images resized and saved to {output_folder}.")
----------------------------------------

File: /home/jh/Desktop/Local_Python/IMAGE_PHOTO_SCRIPTS_APPS/thumbnailerv3.py
Name: merge_images
Type: Function
Description: No description available
Code:
    def merge_images(self):
        if len(self.selected_images) < 2:
            messagebox.showwarning("Not Enough Images", "Select at least two images to merge.")
            return

        images = [Image.open(img) for img in self.selected_images]
        total_width = sum(img.width for img in images)
        max_height = max(img.height for img in images)

        self.merged_image = Image.new('RGB', (total_width, max_height))
        x_offset = 0

        for img in images:
            self.merged_image.paste(img, (x_offset, 0))
            x_offset += img.width

        self.display_merged_image(self.merged_image)
----------------------------------------

File: /home/jh/Desktop/Local_Python/IMAGE_PHOTO_SCRIPTS_APPS/thumbnailerv3.py
Name: display_merged_image
Type: Function
Description: No description available
Code:
    def display_merged_image(self, image):
        img = image.resize((800, 600))
        tk_img = ImageTk.PhotoImage(img)
        self.canvas.create_image(400, 300, anchor=tk.CENTER, image=tk_img)
        self.canvas.image = tk_img  # Keep a reference to avoid garbage collection
----------------------------------------

File: /home/jh/Desktop/Local_Python/IMAGE_PHOTO_SCRIPTS_APPS/thumbnailerv3.py
Name: build_sprite_sheet
Type: Function
Description: No description available
Code:
    def build_sprite_sheet(self):
        if not self.selected_images:
            messagebox.showwarning("No Images", "Select images to create a sprite sheet.")
            return

        try:
            columns = simpledialog.askinteger("Columns", "Enter number of columns:", minvalue=1)
            if not columns:
                return

            rows = (len(self.selected_images) + columns - 1) // columns
            img_width, img_height = Image.open(self.selected_images[0]).size

            self.sprite_sheet = Image.new('RGBA', (img_width * columns, img_height * rows))
            for idx, img_path in enumerate(self.selected_images):
                img = Image.open(img_path)
                row, col = divmod(idx, columns)
                self.sprite_sheet.paste(img, (col * img_width, row * img_height))

            self.display_merged_image(self.sprite_sheet)
            messagebox.showinfo("Sprite Sheet Complete", "Sprite sheet built successfully.")
        except Exception as e:
            messagebox.showerror("Error", str(e))
----------------------------------------

File: /home/jh/Desktop/Local_Python/IMAGE_PHOTO_SCRIPTS_APPS/Thumbnail_ver8.py
Name: ImageToolApp
Type: Class
Description: No description available
Code:
class ImageToolApp(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title("Image Tool Suite")
        self.geometry("1400x800")

        # Initialize attributes
        self.image_paths = []
        self.selected_images = []
        self.current_img_path = None
        self.bookmarks = self.load_bookmarks()

        # Top frame for options
        self.frame_top = tk.Frame(self)
        self.frame_top.grid(row=0, column=0, columnspan=2, sticky="ew", padx=10, pady=10)

        self.btn_browse = tk.Button(self.frame_top, text="Select Directory", command=self.browse_directory)
        self.btn_browse.grid(row=0, column=0, padx=5)

        self.var_recursive = tk.BooleanVar()
        self.check_recursive = tk.Checkbutton(
            self.frame_top, text="Recursive View", variable=self.var_recursive, command=self.update_view
        )
        self.check_recursive.grid(row=0, column=1, padx=5)

        self.btn_clear = tk.Button(self.frame_top, text="Clear Thumbnails", command=self.clear_thumbnails)
        self.btn_clear.grid(row=0, column=2, padx=5)

        self.btn_exit = tk.Button(self.frame_top, text="Exit", command=self.quit_program)
        self.btn_exit.grid(row=0, column=3, padx=5)

        # Bookmark controls
        self.btn_add_bookmark = tk.Button(self.frame_top, text="Add Bookmark", command=self.add_bookmark)
        self.btn_add_bookmark.grid(row=0, column=4, padx=5)

        self.btn_delete_bookmark = tk.Button(self.frame_top, text="Delete Bookmark", command=self.delete_bookmark)
        self.btn_delete_bookmark.grid(row=0, column=5, padx=5)

        self.bookmark_var = tk.StringVar(self)
        self.bookmark_menu = ttk.Combobox(self.frame_top, textvariable=self.bookmark_var, values=list(self.bookmarks.keys()))
        self.bookmark_menu.grid(row=0, column=6, padx=5)
        self.bookmark_menu.bind("<<ComboboxSelected>>", self.goto_bookmark)

        # Frame for thumbnails
        self.frame_left = tk.Frame(self)
        self.frame_left.grid(row=1, column=0, sticky="nsew", padx=10, pady=10)

        # Canvas for thumbnails
        self.canvas = tk.Canvas(self.frame_left, bg="white", bd=11)
        self.canvas.grid(row=0, column=0, sticky="nsew")

        self.scroll_y = tk.Scrollbar(self.frame_left, orient="vertical", command=self.canvas.yview)
        self.scroll_y.grid(row=0, column=1, sticky="ns")
        self.canvas.config(yscrollcommand=self.scroll_y.set)

        # Frame to hold thumbnails inside the canvas
        self.frame_thumbnails = tk.Frame(self.canvas)
        self.canvas.create_window((0, 0), window=self.frame_thumbnails, anchor="nw")

        # Progress bar for loading indication
        self.progress_bar = ttk.Progressbar(self.frame_left, orient="horizontal", length=400, mode="determinate")
        self.progress_bar.grid(row=1, column=0, columnspan=2, pady=5, sticky="ew")

        # Frame for file info
        self.frame_right = tk.Frame(self, width=300)
        self.frame_right.grid(row=1, column=1, sticky="nsew", padx=10, pady=10)

        self.lbl_info = tk.Label(self.frame_right, text="File Info", anchor="w")
        self.lbl_info.grid(row=0, column=0, sticky="w", pady=5)

        self.txt_info = tk.Text(self.frame_right, height=8, width=40, wrap="word")
        self.txt_info.grid(row=1, column=0, sticky="nsew")

        self.lbl_selected = tk.Label(self.frame_right, text="Selected Images")
        self.lbl_selected.grid(row=2, column=0, sticky="w", pady=5)

        self.listbox_selected = tk.Listbox(self.frame_right, height=15, width=40)
        self.listbox_selected.grid(row=3, column=0, sticky="nsew")

        # Grid weight configuration
        self.grid_rowconfigure(1, weight=1)
        self.grid_columnconfigure(0, weight=1)
        self.frame_left.grid_rowconfigure(0, weight=1)
        self.frame_left.grid_columnconfigure(0, weight=1)
        self.frame_right.grid_rowconfigure(1, weight=1)

    def load_bookmarks(self):
        """Load bookmarks from a JSON file."""
        try:
            with open(BOOKMARK_FILE, 'r') as file:
                return json.load(file)
        except (FileNotFoundError, json.JSONDecodeError):
            return {}

    def save_bookmarks(self):
        """Save bookmarks to a JSON file."""
        with open(BOOKMARK_FILE, 'w') as file:
            json.dump(self.bookmarks, file, indent=4)

    def add_bookmark(self):
        """Add the current directory to bookmarks."""
        if not self.current_img_path:
            messagebox.showwarning("No Directory", "Select a directory first.")
            return

        dir_name = os.path.basename(os.path.dirname(self.current_img_path))
        bookmark_name = simpledialog.askstring("Bookmark Name", f"Enter a name for this bookmark ({dir_name}):")
        if bookmark_name:
            self.bookmarks[bookmark_name] = os.path.dirname(self.current_img_path)
            self.bookmark_menu['values'] = list(self.bookmarks.keys())
            self.save_bookmarks()
            messagebox.showinfo("Bookmark Added", f"Bookmark '{bookmark_name}' added successfully.")

    def delete_bookmark(self):
        """Delete the selected bookmark."""
        selected_bookmark = self.bookmark_var.get()
        if not selected_bookmark:
            messagebox.showwarning("No Bookmark Selected", "Select a bookmark to delete.")
            return

        del self.bookmarks[selected_bookmark]
        self.bookmark_menu['values'] = list(self.bookmarks.keys())
        self.bookmark_var.set('')
        self.save_bookmarks()
        messagebox.showinfo("Bookmark Deleted", f"Bookmark '{selected_bookmark}' deleted successfully.")

    def goto_bookmark(self, event):
        """Go to the selected bookmark directory."""
        selected_bookmark = self.bookmark_var.get()
        if selected_bookmark and selected_bookmark in self.bookmarks:
            self.load_images(self.bookmarks[selected_bookmark])

    def browse_directory(self):
        directory = filedialog.askdirectory()
        if not directory:
            return

        # Start the image loading in a separate thread
        threading.Thread(target=self.load_images, args=(directory,), daemon=True).start()

    def load_images(self, directory):
        extensions = ('*.png', '*.jpg', '*.jpeg', '*.bmp', '*.gif', '*.tiff')
        search_pattern = '**/*' if self.var_recursive.get() else '*'

        self.image_paths = []
        for ext in extensions:
            self.image_paths.extend(glob(os.path.join(directory, search_pattern, ext), recursive=self.var_recursive.get()))

        if not self.image_paths:
            messagebox.showinfo("No Images Found", "No images found in the selected directory.")
            return

        self.display_thumbnails()

    def display_thumbnails(self):
        self.clear_thumbnails()
        self.progress_bar["maximum"] = len(self.image_paths)

        for idx, img_path in enumerate(self.image_paths):
            try:
                img = Image.open(img_path)
                img.thumbnail((100, 100))
                tk_img = ImageTk.PhotoImage(img)

                frame = tk.Frame(self.frame_thumbnails, bd=2, relief="ridge")
                frame.grid(row=idx // 6, column=idx % 6, padx=5, pady=5)

                lbl_img = tk.Label(frame, image=tk_img)
                lbl_img.image = tk_img
                lbl_img.grid(row=0, column=0)

                lbl_info = tk.Label(frame, text=os.path.basename(img_path), wraplength=100, anchor="w")
                lbl_info.grid(row=1, column=0, sticky="ew")

                lbl_img.bind("<Enter>", lambda e, path=img_path: self.show_file_info(path))
                lbl_img.bind("<Double-1>", lambda e, path=img_path: self.add_to_selection(path))

                # Update the progress bar
                self.progress_bar.step(1)
                self.progress_bar.update_idletasks()

            except Exception as e:
                print(f"Error loading image {img_path}: {e}")

        self.frame_thumbnails.update_idletasks()
        self.canvas.config(scrollregion=self.canvas.bbox("all"))
        self.progress_bar["value"] = 0

    def clear_thumbnails(self):
        """Clears the currently displayed thumbnails."""
        for widget in self.frame_thumbnails.winfo_children():
            widget.destroy()

    def show_file_info(self, img_path):
        file_size = os.path.getsize(img_path) / 1024
        last_modified = time.ctime(os.path.getmtime(img_path))

        info_text = (
            f"Path: {img_path}\n"
            f"Size: {file_size:.2f} KB\n"
            f"Last Modified: {last_modified}"
        )

        self.txt_info.delete(1.0, tk.END)
        self.txt_info.insert(tk.END, info_text)
        self.current_img_path = img_path

    def add_to_selection(self, img_path):
        if img_path not in self.selected_images:
            self.selected_images.append(img_path)
            self.listbox_selected.insert(tk.END, os.path.basename(img_path))



    
    def merge_images(self):
        if len(self.selected_images) < 2:
            messagebox.showwarning("Not Enough Images", "Select at least two images to merge.")
            return

        images = [Image.open(img) for img in self.selected_images]
        total_width = sum(img.width for img in images)
        max_height = max(img.height for img in images)

        merged_image = Image.new('RGB', (total_width, max_height))
        x_offset = 0

        for img in images:
            merged_image.paste(img, (x_offset, 0))
            x_offset += img.width

        self.display_merged_image(merged_image)

    def display_merged_image(self, image):
        img = image.resize((800, 600))
        tk_img = ImageTk.PhotoImage(img)
        self.canvas.create_image(400, 300, anchor=tk.CENTER, image=tk_img)
        self.canvas.image = tk_img

    def build_sprite_sheet(self):
        if not self.selected_images:
            messagebox.showwarning("No Images", "Select images to create a sprite sheet.")
            return

        try:
            columns = simpledialog.askinteger("Columns", "Enter number of columns:", minvalue=1)
            if not columns:
                return

            rows = (len(self.selected_images) + columns - 1) // columns
            img_width, img_height = Image.open(self.selected_images[0]).size

            sprite_sheet = Image.new('RGBA', (img_width * columns, img_height * rows))
            for idx, img_path in enumerate(self.selected_images):
                img = Image.open(img_path)
                row, col = divmod(idx, columns)
                sprite_sheet.paste(img, (col * img_width, row * img_height))

            self.display_merged_image(sprite_sheet)
            messagebox.showinfo("Sprite Sheet Complete", "Sprite sheet built successfully.")
        except Exception as e:
            messagebox.showerror("Error", str(e))


    def quit_program(self):
        """Exits the program."""
        self.destroy()
        sys.exit()

    def update_view(self):
        self.browse_directory()
----------------------------------------

File: /home/jh/Desktop/Local_Python/IMAGE_PHOTO_SCRIPTS_APPS/Thumbnail_ver8.py
Name: __init__
Type: Function
Description: No description available
Code:
    def __init__(self):
        super().__init__()
        self.title("Image Tool Suite")
        self.geometry("1400x800")

        # Initialize attributes
        self.image_paths = []
        self.selected_images = []
        self.current_img_path = None
        self.bookmarks = self.load_bookmarks()

        # Top frame for options
        self.frame_top = tk.Frame(self)
        self.frame_top.grid(row=0, column=0, columnspan=2, sticky="ew", padx=10, pady=10)

        self.btn_browse = tk.Button(self.frame_top, text="Select Directory", command=self.browse_directory)
        self.btn_browse.grid(row=0, column=0, padx=5)

        self.var_recursive = tk.BooleanVar()
        self.check_recursive = tk.Checkbutton(
            self.frame_top, text="Recursive View", variable=self.var_recursive, command=self.update_view
        )
        self.check_recursive.grid(row=0, column=1, padx=5)

        self.btn_clear = tk.Button(self.frame_top, text="Clear Thumbnails", command=self.clear_thumbnails)
        self.btn_clear.grid(row=0, column=2, padx=5)

        self.btn_exit = tk.Button(self.frame_top, text="Exit", command=self.quit_program)
        self.btn_exit.grid(row=0, column=3, padx=5)

        # Bookmark controls
        self.btn_add_bookmark = tk.Button(self.frame_top, text="Add Bookmark", command=self.add_bookmark)
        self.btn_add_bookmark.grid(row=0, column=4, padx=5)

        self.btn_delete_bookmark = tk.Button(self.frame_top, text="Delete Bookmark", command=self.delete_bookmark)
        self.btn_delete_bookmark.grid(row=0, column=5, padx=5)

        self.bookmark_var = tk.StringVar(self)
        self.bookmark_menu = ttk.Combobox(self.frame_top, textvariable=self.bookmark_var, values=list(self.bookmarks.keys()))
        self.bookmark_menu.grid(row=0, column=6, padx=5)
        self.bookmark_menu.bind("<<ComboboxSelected>>", self.goto_bookmark)

        # Frame for thumbnails
        self.frame_left = tk.Frame(self)
        self.frame_left.grid(row=1, column=0, sticky="nsew", padx=10, pady=10)

        # Canvas for thumbnails
        self.canvas = tk.Canvas(self.frame_left, bg="white", bd=11)
        self.canvas.grid(row=0, column=0, sticky="nsew")

        self.scroll_y = tk.Scrollbar(self.frame_left, orient="vertical", command=self.canvas.yview)
        self.scroll_y.grid(row=0, column=1, sticky="ns")
        self.canvas.config(yscrollcommand=self.scroll_y.set)

        # Frame to hold thumbnails inside the canvas
        self.frame_thumbnails = tk.Frame(self.canvas)
        self.canvas.create_window((0, 0), window=self.frame_thumbnails, anchor="nw")

        # Progress bar for loading indication
        self.progress_bar = ttk.Progressbar(self.frame_left, orient="horizontal", length=400, mode="determinate")
        self.progress_bar.grid(row=1, column=0, columnspan=2, pady=5, sticky="ew")

        # Frame for file info
        self.frame_right = tk.Frame(self, width=300)
        self.frame_right.grid(row=1, column=1, sticky="nsew", padx=10, pady=10)

        self.lbl_info = tk.Label(self.frame_right, text="File Info", anchor="w")
        self.lbl_info.grid(row=0, column=0, sticky="w", pady=5)

        self.txt_info = tk.Text(self.frame_right, height=8, width=40, wrap="word")
        self.txt_info.grid(row=1, column=0, sticky="nsew")

        self.lbl_selected = tk.Label(self.frame_right, text="Selected Images")
        self.lbl_selected.grid(row=2, column=0, sticky="w", pady=5)

        self.listbox_selected = tk.Listbox(self.frame_right, height=15, width=40)
        self.listbox_selected.grid(row=3, column=0, sticky="nsew")

        # Grid weight configuration
        self.grid_rowconfigure(1, weight=1)
        self.grid_columnconfigure(0, weight=1)
        self.frame_left.grid_rowconfigure(0, weight=1)
        self.frame_left.grid_columnconfigure(0, weight=1)
        self.frame_right.grid_rowconfigure(1, weight=1)
----------------------------------------

File: /home/jh/Desktop/Local_Python/IMAGE_PHOTO_SCRIPTS_APPS/Thumbnail_ver8.py
Name: load_bookmarks
Type: Function
Description: Load bookmarks from a JSON file.
Code:
    def load_bookmarks(self):
        """Load bookmarks from a JSON file."""
        try:
            with open(BOOKMARK_FILE, 'r') as file:
                return json.load(file)
        except (FileNotFoundError, json.JSONDecodeError):
            return {}
----------------------------------------

File: /home/jh/Desktop/Local_Python/IMAGE_PHOTO_SCRIPTS_APPS/Thumbnail_ver8.py
Name: save_bookmarks
Type: Function
Description: Save bookmarks to a JSON file.
Code:
    def save_bookmarks(self):
        """Save bookmarks to a JSON file."""
        with open(BOOKMARK_FILE, 'w') as file:
            json.dump(self.bookmarks, file, indent=4)
----------------------------------------

File: /home/jh/Desktop/Local_Python/IMAGE_PHOTO_SCRIPTS_APPS/Thumbnail_ver8.py
Name: add_bookmark
Type: Function
Description: Add the current directory to bookmarks.
Code:
    def add_bookmark(self):
        """Add the current directory to bookmarks."""
        if not self.current_img_path:
            messagebox.showwarning("No Directory", "Select a directory first.")
            return

        dir_name = os.path.basename(os.path.dirname(self.current_img_path))
        bookmark_name = simpledialog.askstring("Bookmark Name", f"Enter a name for this bookmark ({dir_name}):")
        if bookmark_name:
            self.bookmarks[bookmark_name] = os.path.dirname(self.current_img_path)
            self.bookmark_menu['values'] = list(self.bookmarks.keys())
            self.save_bookmarks()
            messagebox.showinfo("Bookmark Added", f"Bookmark '{bookmark_name}' added successfully.")
----------------------------------------

File: /home/jh/Desktop/Local_Python/IMAGE_PHOTO_SCRIPTS_APPS/Thumbnail_ver8.py
Name: delete_bookmark
Type: Function
Description: Delete the selected bookmark.
Code:
    def delete_bookmark(self):
        """Delete the selected bookmark."""
        selected_bookmark = self.bookmark_var.get()
        if not selected_bookmark:
            messagebox.showwarning("No Bookmark Selected", "Select a bookmark to delete.")
            return

        del self.bookmarks[selected_bookmark]
        self.bookmark_menu['values'] = list(self.bookmarks.keys())
        self.bookmark_var.set('')
        self.save_bookmarks()
        messagebox.showinfo("Bookmark Deleted", f"Bookmark '{selected_bookmark}' deleted successfully.")
----------------------------------------

File: /home/jh/Desktop/Local_Python/IMAGE_PHOTO_SCRIPTS_APPS/Thumbnail_ver8.py
Name: goto_bookmark
Type: Function
Description: Go to the selected bookmark directory.
Code:
    def goto_bookmark(self, event):
        """Go to the selected bookmark directory."""
        selected_bookmark = self.bookmark_var.get()
        if selected_bookmark and selected_bookmark in self.bookmarks:
            self.load_images(self.bookmarks[selected_bookmark])
----------------------------------------

File: /home/jh/Desktop/Local_Python/IMAGE_PHOTO_SCRIPTS_APPS/Thumbnail_ver8.py
Name: browse_directory
Type: Function
Description: No description available
Code:
    def browse_directory(self):
        directory = filedialog.askdirectory()
        if not directory:
            return

        # Start the image loading in a separate thread
        threading.Thread(target=self.load_images, args=(directory,), daemon=True).start()
----------------------------------------

File: /home/jh/Desktop/Local_Python/IMAGE_PHOTO_SCRIPTS_APPS/Thumbnail_ver8.py
Name: load_images
Type: Function
Description: No description available
Code:
    def load_images(self, directory):
        extensions = ('*.png', '*.jpg', '*.jpeg', '*.bmp', '*.gif', '*.tiff')
        search_pattern = '**/*' if self.var_recursive.get() else '*'

        self.image_paths = []
        for ext in extensions:
            self.image_paths.extend(glob(os.path.join(directory, search_pattern, ext), recursive=self.var_recursive.get()))

        if not self.image_paths:
            messagebox.showinfo("No Images Found", "No images found in the selected directory.")
            return

        self.display_thumbnails()
----------------------------------------

File: /home/jh/Desktop/Local_Python/IMAGE_PHOTO_SCRIPTS_APPS/Thumbnail_ver8.py
Name: display_thumbnails
Type: Function
Description: No description available
Code:
    def display_thumbnails(self):
        self.clear_thumbnails()
        self.progress_bar["maximum"] = len(self.image_paths)

        for idx, img_path in enumerate(self.image_paths):
            try:
                img = Image.open(img_path)
                img.thumbnail((100, 100))
                tk_img = ImageTk.PhotoImage(img)

                frame = tk.Frame(self.frame_thumbnails, bd=2, relief="ridge")
                frame.grid(row=idx // 6, column=idx % 6, padx=5, pady=5)

                lbl_img = tk.Label(frame, image=tk_img)
                lbl_img.image = tk_img
                lbl_img.grid(row=0, column=0)

                lbl_info = tk.Label(frame, text=os.path.basename(img_path), wraplength=100, anchor="w")
                lbl_info.grid(row=1, column=0, sticky="ew")

                lbl_img.bind("<Enter>", lambda e, path=img_path: self.show_file_info(path))
                lbl_img.bind("<Double-1>", lambda e, path=img_path: self.add_to_selection(path))

                # Update the progress bar
                self.progress_bar.step(1)
                self.progress_bar.update_idletasks()

            except Exception as e:
                print(f"Error loading image {img_path}: {e}")

        self.frame_thumbnails.update_idletasks()
        self.canvas.config(scrollregion=self.canvas.bbox("all"))
        self.progress_bar["value"] = 0
----------------------------------------

File: /home/jh/Desktop/Local_Python/IMAGE_PHOTO_SCRIPTS_APPS/Thumbnail_ver8.py
Name: clear_thumbnails
Type: Function
Description: Clears the currently displayed thumbnails.
Code:
    def clear_thumbnails(self):
        """Clears the currently displayed thumbnails."""
        for widget in self.frame_thumbnails.winfo_children():
            widget.destroy()
----------------------------------------

File: /home/jh/Desktop/Local_Python/IMAGE_PHOTO_SCRIPTS_APPS/Thumbnail_ver8.py
Name: show_file_info
Type: Function
Description: No description available
Code:
    def show_file_info(self, img_path):
        file_size = os.path.getsize(img_path) / 1024
        last_modified = time.ctime(os.path.getmtime(img_path))

        info_text = (
            f"Path: {img_path}\n"
            f"Size: {file_size:.2f} KB\n"
            f"Last Modified: {last_modified}"
        )

        self.txt_info.delete(1.0, tk.END)
        self.txt_info.insert(tk.END, info_text)
        self.current_img_path = img_path
----------------------------------------

File: /home/jh/Desktop/Local_Python/IMAGE_PHOTO_SCRIPTS_APPS/Thumbnail_ver8.py
Name: add_to_selection
Type: Function
Description: No description available
Code:
    def add_to_selection(self, img_path):
        if img_path not in self.selected_images:
            self.selected_images.append(img_path)
            self.listbox_selected.insert(tk.END, os.path.basename(img_path))
----------------------------------------

File: /home/jh/Desktop/Local_Python/IMAGE_PHOTO_SCRIPTS_APPS/Thumbnail_ver8.py
Name: merge_images
Type: Function
Description: No description available
Code:
    def merge_images(self):
        if len(self.selected_images) < 2:
            messagebox.showwarning("Not Enough Images", "Select at least two images to merge.")
            return

        images = [Image.open(img) for img in self.selected_images]
        total_width = sum(img.width for img in images)
        max_height = max(img.height for img in images)

        merged_image = Image.new('RGB', (total_width, max_height))
        x_offset = 0

        for img in images:
            merged_image.paste(img, (x_offset, 0))
            x_offset += img.width

        self.display_merged_image(merged_image)
----------------------------------------

File: /home/jh/Desktop/Local_Python/IMAGE_PHOTO_SCRIPTS_APPS/Thumbnail_ver8.py
Name: display_merged_image
Type: Function
Description: No description available
Code:
    def display_merged_image(self, image):
        img = image.resize((800, 600))
        tk_img = ImageTk.PhotoImage(img)
        self.canvas.create_image(400, 300, anchor=tk.CENTER, image=tk_img)
        self.canvas.image = tk_img
----------------------------------------

File: /home/jh/Desktop/Local_Python/IMAGE_PHOTO_SCRIPTS_APPS/Thumbnail_ver8.py
Name: build_sprite_sheet
Type: Function
Description: No description available
Code:
    def build_sprite_sheet(self):
        if not self.selected_images:
            messagebox.showwarning("No Images", "Select images to create a sprite sheet.")
            return

        try:
            columns = simpledialog.askinteger("Columns", "Enter number of columns:", minvalue=1)
            if not columns:
                return

            rows = (len(self.selected_images) + columns - 1) // columns
            img_width, img_height = Image.open(self.selected_images[0]).size

            sprite_sheet = Image.new('RGBA', (img_width * columns, img_height * rows))
            for idx, img_path in enumerate(self.selected_images):
                img = Image.open(img_path)
                row, col = divmod(idx, columns)
                sprite_sheet.paste(img, (col * img_width, row * img_height))

            self.display_merged_image(sprite_sheet)
            messagebox.showinfo("Sprite Sheet Complete", "Sprite sheet built successfully.")
        except Exception as e:
            messagebox.showerror("Error", str(e))
----------------------------------------

File: /home/jh/Desktop/Local_Python/IMAGE_PHOTO_SCRIPTS_APPS/Thumbnail_ver8.py
Name: quit_program
Type: Function
Description: Exits the program.
Code:
    def quit_program(self):
        """Exits the program."""
        self.destroy()
        sys.exit()
----------------------------------------

File: /home/jh/Desktop/Local_Python/IMAGE_PHOTO_SCRIPTS_APPS/Thumbnail_ver8.py
Name: update_view
Type: Function
Description: No description available
Code:
    def update_view(self):
        self.browse_directory()
----------------------------------------

File: /home/jh/Desktop/Local_Python/IMAGE_PHOTO_SCRIPTS_APPS/Image_Pro_V8.py
Name: ImageToolApp
Type: Class
Description: No description available
Code:
class ImageToolApp(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title("Image Tool Suite")
        self.geometry("1400x800")

        # Initialize attributes
        self.image_paths = []
        self.selected_images = []
        self.current_img_path = None
        self.bookmarks = self.load_bookmarks()

        # Top frame for options
        self.frame_top = tk.Frame(self)
        self.frame_top.grid(row=0, column=0, columnspan=2, sticky="ew", padx=10, pady=10)

        self.btn_browse = tk.Button(self.frame_top, text="Select Directory", command=self.browse_directory)
        self.btn_browse.grid(row=0, column=0, padx=5)

        self.var_recursive = tk.BooleanVar()
        self.check_recursive = tk.Checkbutton(
            self.frame_top, text="Recursive View", variable=self.var_recursive, command=self.update_view
        )
        self.check_recursive.grid(row=0, column=1, padx=5)

        self.btn_clear = tk.Button(self.frame_top, text="Clear Thumbnails", command=self.clear_thumbnails)
        self.btn_clear.grid(row=0, column=2, padx=5)

        self.btn_exit = tk.Button(self.frame_top, text="Exit", command=self.quit_program)
        self.btn_exit.grid(row=0, column=3, padx=5)

        # Bookmark controls
        self.btn_add_bookmark = tk.Button(self.frame_top, text="Add Bookmark", command=self.add_bookmark)
        self.btn_add_bookmark.grid(row=0, column=4, padx=5)

        self.btn_delete_bookmark = tk.Button(self.frame_top, text="Delete Bookmark", command=self.delete_bookmark)
        self.btn_delete_bookmark.grid(row=0, column=5, padx=5)

        self.bookmark_var = tk.StringVar(self)
        self.bookmark_menu = ttk.Combobox(self.frame_top, textvariable=self.bookmark_var, values=list(self.bookmarks.keys()))
        self.bookmark_menu.grid(row=0, column=6, padx=5)
        self.bookmark_menu.bind("<<ComboboxSelected>>", self.goto_bookmark)

        # Frame for thumbnails
        self.frame_left = tk.Frame(self)
        self.frame_left.grid(row=1, column=0, sticky="nsew", padx=10, pady=10)

        # Canvas for thumbnails
        self.canvas = tk.Canvas(self.frame_left, bg="white", bd=11)
        self.canvas.grid(row=0, column=0, sticky="nsew")

        self.scroll_y = tk.Scrollbar(self.frame_left, orient="vertical", command=self.canvas.yview)
        self.scroll_y.grid(row=0, column=1, sticky="ns")
        self.canvas.config(yscrollcommand=self.scroll_y.set)

        # Frame to hold thumbnails inside the canvas
        self.frame_thumbnails = tk.Frame(self.canvas)
        self.canvas.create_window((0, 0), window=self.frame_thumbnails, anchor="nw")

        # Progress bar for loading indication
        self.progress_bar = ttk.Progressbar(self.frame_left, orient="horizontal", length=400, mode="determinate")
        self.progress_bar.grid(row=1, column=0, columnspan=2, pady=5, sticky="ew")

        # Frame for file info
        self.frame_right = tk.Frame(self, width=300)
        self.frame_right.grid(row=1, column=1, sticky="nsew", padx=10, pady=10)

        self.lbl_info = tk.Label(self.frame_right, text="File Info", anchor="w")
        self.lbl_info.grid(row=0, column=0, sticky="w", pady=5)

        self.txt_info = tk.Text(self.frame_right, height=8, width=40, wrap="word")
        self.txt_info.grid(row=1, column=0, sticky="nsew")

        self.lbl_selected = tk.Label(self.frame_right, text="Selected Images")
        self.lbl_selected.grid(row=2, column=0, sticky="w", pady=5)

        self.listbox_selected = tk.Listbox(self.frame_right, height=15, width=40)
        self.listbox_selected.grid(row=3, column=0, sticky="nsew")

        # Grid weight configuration
        self.grid_rowconfigure(1, weight=1)
        self.grid_columnconfigure(0, weight=1)
        self.frame_left.grid_rowconfigure(0, weight=1)
        self.frame_left.grid_columnconfigure(0, weight=1)
        self.frame_right.grid_rowconfigure(1, weight=1)

    def load_bookmarks(self):
        """Load bookmarks from a JSON file."""
        try:
            with open(BOOKMARK_FILE, 'r') as file:
                return json.load(file)
        except (FileNotFoundError, json.JSONDecodeError):
            return {}

    def save_bookmarks(self):
        """Save bookmarks to a JSON file."""
        with open(BOOKMARK_FILE, 'w') as file:
            json.dump(self.bookmarks, file, indent=4)

    def add_bookmark(self):
        """Add the current directory to bookmarks."""
        if not self.current_img_path:
            messagebox.showwarning("No Directory", "Select a directory first.")
            return

        dir_name = os.path.basename(os.path.dirname(self.current_img_path))
        bookmark_name = simpledialog.askstring("Bookmark Name", f"Enter a name for this bookmark ({dir_name}):")
        if bookmark_name:
            self.bookmarks[bookmark_name] = os.path.dirname(self.current_img_path)
            self.bookmark_menu['values'] = list(self.bookmarks.keys())
            self.save_bookmarks()
            messagebox.showinfo("Bookmark Added", f"Bookmark '{bookmark_name}' added successfully.")

    def delete_bookmark(self):
        """Delete the selected bookmark."""
        selected_bookmark = self.bookmark_var.get()
        if not selected_bookmark:
            messagebox.showwarning("No Bookmark Selected", "Select a bookmark to delete.")
            return

        del self.bookmarks[selected_bookmark]
        self.bookmark_menu['values'] = list(self.bookmarks.keys())
        self.bookmark_var.set('')
        self.save_bookmarks()
        messagebox.showinfo("Bookmark Deleted", f"Bookmark '{selected_bookmark}' deleted successfully.")

    def goto_bookmark(self, event):
        """Go to the selected bookmark directory."""
        selected_bookmark = self.bookmark_var.get()
        if selected_bookmark and selected_bookmark in self.bookmarks:
            self.load_images(self.bookmarks[selected_bookmark])

    def browse_directory(self):
        directory = filedialog.askdirectory()
        if not directory:
            return

        # Start the image loading in a separate thread
        threading.Thread(target=self.load_images, args=(directory,), daemon=True).start()

    def load_images(self, directory):
        extensions = ('*.png', '*.jpg', '*.jpeg', '*.bmp', '*.gif', '*.tiff')
        search_pattern = '**/*' if self.var_recursive.get() else '*'

        self.image_paths = []
        for ext in extensions:
            self.image_paths.extend(glob(os.path.join(directory, search_pattern, ext), recursive=self.var_recursive.get()))

        if not self.image_paths:
            messagebox.showinfo("No Images Found", "No images found in the selected directory.")
            return

        self.display_thumbnails()

    def display_thumbnails(self):
        self.clear_thumbnails()
        self.progress_bar["maximum"] = len(self.image_paths)

        for idx, img_path in enumerate(self.image_paths):
            try:
                img = Image.open(img_path)
                img.thumbnail((100, 100))
                tk_img = ImageTk.PhotoImage(img)

                frame = tk.Frame(self.frame_thumbnails, bd=2, relief="ridge")
                frame.grid(row=idx // 6, column=idx % 6, padx=5, pady=5)

                lbl_img = tk.Label(frame, image=tk_img)
                lbl_img.image = tk_img
                lbl_img.grid(row=0, column=0)

                lbl_info = tk.Label(frame, text=os.path.basename(img_path), wraplength=100, anchor="w")
                lbl_info.grid(row=1, column=0, sticky="ew")

                lbl_img.bind("<Enter>", lambda e, path=img_path: self.show_file_info(path))
                lbl_img.bind("<Double-1>", lambda e, path=img_path: self.add_to_selection(path))

                # Update the progress bar
                self.progress_bar.step(1)
                self.progress_bar.update_idletasks()

            except Exception as e:
                print(f"Error loading image {img_path}: {e}")

        self.frame_thumbnails.update_idletasks()
        self.canvas.config(scrollregion=self.canvas.bbox("all"))
        self.progress_bar["value"] = 0

    def clear_thumbnails(self):
        """Clears the currently displayed thumbnails."""
        for widget in self.frame_thumbnails.winfo_children():
            widget.destroy()

    def show_file_info(self, img_path):
        file_size = os.path.getsize(img_path) / 1024
        last_modified = time.ctime(os.path.getmtime(img_path))

        info_text = (
            f"Path: {img_path}\n"
            f"Size: {file_size:.2f} KB\n"
            f"Last Modified: {last_modified}"
        )

        self.txt_info.delete(1.0, tk.END)
        self.txt_info.insert(tk.END, info_text)
        self.current_img_path = img_path

    def add_to_selection(self, img_path):
        if img_path not in self.selected_images:
            self.selected_images.append(img_path)
            self.listbox_selected.insert(tk.END, os.path.basename(img_path))



    
    def merge_images(self):
        if len(self.selected_images) < 2:
            messagebox.showwarning("Not Enough Images", "Select at least two images to merge.")
            return

        images = [Image.open(img) for img in self.selected_images]
        total_width = sum(img.width for img in images)
        max_height = max(img.height for img in images)

        merged_image = Image.new('RGB', (total_width, max_height))
        x_offset = 0

        for img in images:
            merged_image.paste(img, (x_offset, 0))
            x_offset += img.width

        self.display_merged_image(merged_image)

    def display_merged_image(self, image):
        img = image.resize((800, 600))
        tk_img = ImageTk.PhotoImage(img)
        self.canvas.create_image(400, 300, anchor=tk.CENTER, image=tk_img)
        self.canvas.image = tk_img

    def build_sprite_sheet(self):
        if not self.selected_images:
            messagebox.showwarning("No Images", "Select images to create a sprite sheet.")
            return

        try:
            columns = simpledialog.askinteger("Columns", "Enter number of columns:", minvalue=1)
            if not columns:
                return

            rows = (len(self.selected_images) + columns - 1) // columns
            img_width, img_height = Image.open(self.selected_images[0]).size

            sprite_sheet = Image.new('RGBA', (img_width * columns, img_height * rows))
            for idx, img_path in enumerate(self.selected_images):
                img = Image.open(img_path)
                row, col = divmod(idx, columns)
                sprite_sheet.paste(img, (col * img_width, row * img_height))

            self.display_merged_image(sprite_sheet)
            messagebox.showinfo("Sprite Sheet Complete", "Sprite sheet built successfully.")
        except Exception as e:
            messagebox.showerror("Error", str(e))


    def quit_program(self):
        """Exits the program."""
        self.destroy()
        sys.exit()

    def update_view(self):
        self.browse_directory()
----------------------------------------

File: /home/jh/Desktop/Local_Python/IMAGE_PHOTO_SCRIPTS_APPS/Image_Pro_V8.py
Name: __init__
Type: Function
Description: No description available
Code:
    def __init__(self):
        super().__init__()
        self.title("Image Tool Suite")
        self.geometry("1400x800")

        # Initialize attributes
        self.image_paths = []
        self.selected_images = []
        self.current_img_path = None
        self.bookmarks = self.load_bookmarks()

        # Top frame for options
        self.frame_top = tk.Frame(self)
        self.frame_top.grid(row=0, column=0, columnspan=2, sticky="ew", padx=10, pady=10)

        self.btn_browse = tk.Button(self.frame_top, text="Select Directory", command=self.browse_directory)
        self.btn_browse.grid(row=0, column=0, padx=5)

        self.var_recursive = tk.BooleanVar()
        self.check_recursive = tk.Checkbutton(
            self.frame_top, text="Recursive View", variable=self.var_recursive, command=self.update_view
        )
        self.check_recursive.grid(row=0, column=1, padx=5)

        self.btn_clear = tk.Button(self.frame_top, text="Clear Thumbnails", command=self.clear_thumbnails)
        self.btn_clear.grid(row=0, column=2, padx=5)

        self.btn_exit = tk.Button(self.frame_top, text="Exit", command=self.quit_program)
        self.btn_exit.grid(row=0, column=3, padx=5)

        # Bookmark controls
        self.btn_add_bookmark = tk.Button(self.frame_top, text="Add Bookmark", command=self.add_bookmark)
        self.btn_add_bookmark.grid(row=0, column=4, padx=5)

        self.btn_delete_bookmark = tk.Button(self.frame_top, text="Delete Bookmark", command=self.delete_bookmark)
        self.btn_delete_bookmark.grid(row=0, column=5, padx=5)

        self.bookmark_var = tk.StringVar(self)
        self.bookmark_menu = ttk.Combobox(self.frame_top, textvariable=self.bookmark_var, values=list(self.bookmarks.keys()))
        self.bookmark_menu.grid(row=0, column=6, padx=5)
        self.bookmark_menu.bind("<<ComboboxSelected>>", self.goto_bookmark)

        # Frame for thumbnails
        self.frame_left = tk.Frame(self)
        self.frame_left.grid(row=1, column=0, sticky="nsew", padx=10, pady=10)

        # Canvas for thumbnails
        self.canvas = tk.Canvas(self.frame_left, bg="white", bd=11)
        self.canvas.grid(row=0, column=0, sticky="nsew")

        self.scroll_y = tk.Scrollbar(self.frame_left, orient="vertical", command=self.canvas.yview)
        self.scroll_y.grid(row=0, column=1, sticky="ns")
        self.canvas.config(yscrollcommand=self.scroll_y.set)

        # Frame to hold thumbnails inside the canvas
        self.frame_thumbnails = tk.Frame(self.canvas)
        self.canvas.create_window((0, 0), window=self.frame_thumbnails, anchor="nw")

        # Progress bar for loading indication
        self.progress_bar = ttk.Progressbar(self.frame_left, orient="horizontal", length=400, mode="determinate")
        self.progress_bar.grid(row=1, column=0, columnspan=2, pady=5, sticky="ew")

        # Frame for file info
        self.frame_right = tk.Frame(self, width=300)
        self.frame_right.grid(row=1, column=1, sticky="nsew", padx=10, pady=10)

        self.lbl_info = tk.Label(self.frame_right, text="File Info", anchor="w")
        self.lbl_info.grid(row=0, column=0, sticky="w", pady=5)

        self.txt_info = tk.Text(self.frame_right, height=8, width=40, wrap="word")
        self.txt_info.grid(row=1, column=0, sticky="nsew")

        self.lbl_selected = tk.Label(self.frame_right, text="Selected Images")
        self.lbl_selected.grid(row=2, column=0, sticky="w", pady=5)

        self.listbox_selected = tk.Listbox(self.frame_right, height=15, width=40)
        self.listbox_selected.grid(row=3, column=0, sticky="nsew")

        # Grid weight configuration
        self.grid_rowconfigure(1, weight=1)
        self.grid_columnconfigure(0, weight=1)
        self.frame_left.grid_rowconfigure(0, weight=1)
        self.frame_left.grid_columnconfigure(0, weight=1)
        self.frame_right.grid_rowconfigure(1, weight=1)
----------------------------------------

File: /home/jh/Desktop/Local_Python/IMAGE_PHOTO_SCRIPTS_APPS/Image_Pro_V8.py
Name: load_bookmarks
Type: Function
Description: Load bookmarks from a JSON file.
Code:
    def load_bookmarks(self):
        """Load bookmarks from a JSON file."""
        try:
            with open(BOOKMARK_FILE, 'r') as file:
                return json.load(file)
        except (FileNotFoundError, json.JSONDecodeError):
            return {}
----------------------------------------

File: /home/jh/Desktop/Local_Python/IMAGE_PHOTO_SCRIPTS_APPS/Image_Pro_V8.py
Name: save_bookmarks
Type: Function
Description: Save bookmarks to a JSON file.
Code:
    def save_bookmarks(self):
        """Save bookmarks to a JSON file."""
        with open(BOOKMARK_FILE, 'w') as file:
            json.dump(self.bookmarks, file, indent=4)
----------------------------------------

File: /home/jh/Desktop/Local_Python/IMAGE_PHOTO_SCRIPTS_APPS/Image_Pro_V8.py
Name: add_bookmark
Type: Function
Description: Add the current directory to bookmarks.
Code:
    def add_bookmark(self):
        """Add the current directory to bookmarks."""
        if not self.current_img_path:
            messagebox.showwarning("No Directory", "Select a directory first.")
            return

        dir_name = os.path.basename(os.path.dirname(self.current_img_path))
        bookmark_name = simpledialog.askstring("Bookmark Name", f"Enter a name for this bookmark ({dir_name}):")
        if bookmark_name:
            self.bookmarks[bookmark_name] = os.path.dirname(self.current_img_path)
            self.bookmark_menu['values'] = list(self.bookmarks.keys())
            self.save_bookmarks()
            messagebox.showinfo("Bookmark Added", f"Bookmark '{bookmark_name}' added successfully.")
----------------------------------------

File: /home/jh/Desktop/Local_Python/IMAGE_PHOTO_SCRIPTS_APPS/Image_Pro_V8.py
Name: delete_bookmark
Type: Function
Description: Delete the selected bookmark.
Code:
    def delete_bookmark(self):
        """Delete the selected bookmark."""
        selected_bookmark = self.bookmark_var.get()
        if not selected_bookmark:
            messagebox.showwarning("No Bookmark Selected", "Select a bookmark to delete.")
            return

        del self.bookmarks[selected_bookmark]
        self.bookmark_menu['values'] = list(self.bookmarks.keys())
        self.bookmark_var.set('')
        self.save_bookmarks()
        messagebox.showinfo("Bookmark Deleted", f"Bookmark '{selected_bookmark}' deleted successfully.")
----------------------------------------

File: /home/jh/Desktop/Local_Python/IMAGE_PHOTO_SCRIPTS_APPS/Image_Pro_V8.py
Name: goto_bookmark
Type: Function
Description: Go to the selected bookmark directory.
Code:
    def goto_bookmark(self, event):
        """Go to the selected bookmark directory."""
        selected_bookmark = self.bookmark_var.get()
        if selected_bookmark and selected_bookmark in self.bookmarks:
            self.load_images(self.bookmarks[selected_bookmark])
----------------------------------------

File: /home/jh/Desktop/Local_Python/IMAGE_PHOTO_SCRIPTS_APPS/Image_Pro_V8.py
Name: browse_directory
Type: Function
Description: No description available
Code:
    def browse_directory(self):
        directory = filedialog.askdirectory()
        if not directory:
            return

        # Start the image loading in a separate thread
        threading.Thread(target=self.load_images, args=(directory,), daemon=True).start()
----------------------------------------

File: /home/jh/Desktop/Local_Python/IMAGE_PHOTO_SCRIPTS_APPS/Image_Pro_V8.py
Name: load_images
Type: Function
Description: No description available
Code:
    def load_images(self, directory):
        extensions = ('*.png', '*.jpg', '*.jpeg', '*.bmp', '*.gif', '*.tiff')
        search_pattern = '**/*' if self.var_recursive.get() else '*'

        self.image_paths = []
        for ext in extensions:
            self.image_paths.extend(glob(os.path.join(directory, search_pattern, ext), recursive=self.var_recursive.get()))

        if not self.image_paths:
            messagebox.showinfo("No Images Found", "No images found in the selected directory.")
            return

        self.display_thumbnails()
----------------------------------------

File: /home/jh/Desktop/Local_Python/IMAGE_PHOTO_SCRIPTS_APPS/Image_Pro_V8.py
Name: display_thumbnails
Type: Function
Description: No description available
Code:
    def display_thumbnails(self):
        self.clear_thumbnails()
        self.progress_bar["maximum"] = len(self.image_paths)

        for idx, img_path in enumerate(self.image_paths):
            try:
                img = Image.open(img_path)
                img.thumbnail((100, 100))
                tk_img = ImageTk.PhotoImage(img)

                frame = tk.Frame(self.frame_thumbnails, bd=2, relief="ridge")
                frame.grid(row=idx // 6, column=idx % 6, padx=5, pady=5)

                lbl_img = tk.Label(frame, image=tk_img)
                lbl_img.image = tk_img
                lbl_img.grid(row=0, column=0)

                lbl_info = tk.Label(frame, text=os.path.basename(img_path), wraplength=100, anchor="w")
                lbl_info.grid(row=1, column=0, sticky="ew")

                lbl_img.bind("<Enter>", lambda e, path=img_path: self.show_file_info(path))
                lbl_img.bind("<Double-1>", lambda e, path=img_path: self.add_to_selection(path))

                # Update the progress bar
                self.progress_bar.step(1)
                self.progress_bar.update_idletasks()

            except Exception as e:
                print(f"Error loading image {img_path}: {e}")

        self.frame_thumbnails.update_idletasks()
        self.canvas.config(scrollregion=self.canvas.bbox("all"))
        self.progress_bar["value"] = 0
----------------------------------------

File: /home/jh/Desktop/Local_Python/IMAGE_PHOTO_SCRIPTS_APPS/Image_Pro_V8.py
Name: clear_thumbnails
Type: Function
Description: Clears the currently displayed thumbnails.
Code:
    def clear_thumbnails(self):
        """Clears the currently displayed thumbnails."""
        for widget in self.frame_thumbnails.winfo_children():
            widget.destroy()
----------------------------------------

File: /home/jh/Desktop/Local_Python/IMAGE_PHOTO_SCRIPTS_APPS/Image_Pro_V8.py
Name: show_file_info
Type: Function
Description: No description available
Code:
    def show_file_info(self, img_path):
        file_size = os.path.getsize(img_path) / 1024
        last_modified = time.ctime(os.path.getmtime(img_path))

        info_text = (
            f"Path: {img_path}\n"
            f"Size: {file_size:.2f} KB\n"
            f"Last Modified: {last_modified}"
        )

        self.txt_info.delete(1.0, tk.END)
        self.txt_info.insert(tk.END, info_text)
        self.current_img_path = img_path
----------------------------------------

File: /home/jh/Desktop/Local_Python/IMAGE_PHOTO_SCRIPTS_APPS/Image_Pro_V8.py
Name: add_to_selection
Type: Function
Description: No description available
Code:
    def add_to_selection(self, img_path):
        if img_path not in self.selected_images:
            self.selected_images.append(img_path)
            self.listbox_selected.insert(tk.END, os.path.basename(img_path))
----------------------------------------

File: /home/jh/Desktop/Local_Python/IMAGE_PHOTO_SCRIPTS_APPS/Image_Pro_V8.py
Name: merge_images
Type: Function
Description: No description available
Code:
    def merge_images(self):
        if len(self.selected_images) < 2:
            messagebox.showwarning("Not Enough Images", "Select at least two images to merge.")
            return

        images = [Image.open(img) for img in self.selected_images]
        total_width = sum(img.width for img in images)
        max_height = max(img.height for img in images)

        merged_image = Image.new('RGB', (total_width, max_height))
        x_offset = 0

        for img in images:
            merged_image.paste(img, (x_offset, 0))
            x_offset += img.width

        self.display_merged_image(merged_image)
----------------------------------------

File: /home/jh/Desktop/Local_Python/IMAGE_PHOTO_SCRIPTS_APPS/Image_Pro_V8.py
Name: display_merged_image
Type: Function
Description: No description available
Code:
    def display_merged_image(self, image):
        img = image.resize((800, 600))
        tk_img = ImageTk.PhotoImage(img)
        self.canvas.create_image(400, 300, anchor=tk.CENTER, image=tk_img)
        self.canvas.image = tk_img
----------------------------------------

File: /home/jh/Desktop/Local_Python/IMAGE_PHOTO_SCRIPTS_APPS/Image_Pro_V8.py
Name: build_sprite_sheet
Type: Function
Description: No description available
Code:
    def build_sprite_sheet(self):
        if not self.selected_images:
            messagebox.showwarning("No Images", "Select images to create a sprite sheet.")
            return

        try:
            columns = simpledialog.askinteger("Columns", "Enter number of columns:", minvalue=1)
            if not columns:
                return

            rows = (len(self.selected_images) + columns - 1) // columns
            img_width, img_height = Image.open(self.selected_images[0]).size

            sprite_sheet = Image.new('RGBA', (img_width * columns, img_height * rows))
            for idx, img_path in enumerate(self.selected_images):
                img = Image.open(img_path)
                row, col = divmod(idx, columns)
                sprite_sheet.paste(img, (col * img_width, row * img_height))

            self.display_merged_image(sprite_sheet)
            messagebox.showinfo("Sprite Sheet Complete", "Sprite sheet built successfully.")
        except Exception as e:
            messagebox.showerror("Error", str(e))
----------------------------------------

File: /home/jh/Desktop/Local_Python/IMAGE_PHOTO_SCRIPTS_APPS/Image_Pro_V8.py
Name: quit_program
Type: Function
Description: Exits the program.
Code:
    def quit_program(self):
        """Exits the program."""
        self.destroy()
        sys.exit()
----------------------------------------

File: /home/jh/Desktop/Local_Python/IMAGE_PHOTO_SCRIPTS_APPS/Image_Pro_V8.py
Name: update_view
Type: Function
Description: No description available
Code:
    def update_view(self):
        self.browse_directory()
----------------------------------------

File: /home/jh/Desktop/Local_Python/IMAGE_PHOTO_SCRIPTS_APPS/Thumbnailer_image_pro_V6.py
Name: ImageToolApp
Type: Class
Description: No description available
Code:
class ImageToolApp(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title("Image Tool Suite")
        self.geometry("1400x800")

        # Initialize attributes
        self.image_paths = []
        self.selected_images = []
        self.current_img_path = None
        self.bookmarks = self.load_bookmarks()

        # Top frame for options
        self.frame_top = tk.Frame(self)
        self.frame_top.grid(row=0, column=0, columnspan=2, sticky="ew", padx=10, pady=10)

        self.btn_browse = tk.Button(self.frame_top, text="Select Directory", command=self.browse_directory)
        self.btn_browse.grid(row=0, column=0, padx=5)

        self.var_recursive = tk.BooleanVar()
        self.check_recursive = tk.Checkbutton(
            self.frame_top, text="Recursive View", variable=self.var_recursive, command=self.update_view
        )
        self.check_recursive.grid(row=0, column=1, padx=5)

        self.btn_view_full = tk.Button(self.frame_top, text="View Full Image", command=self.view_full_image)
        self.btn_view_full.grid(row=0, column=2, padx=5)

        self.btn_unselect = tk.Button(self.frame_top, text="Unselect", command=self.unselect_image)
        self.btn_unselect.grid(row=0, column=3, padx=5)

        self.btn_merge = tk.Button(self.frame_top, text="Merge Images", command=self.merge_images)
        self.btn_merge.grid(row=0, column=4, padx=5)

        self.btn_sprite = tk.Button(self.frame_top, text="Build Sprite Sheet", command=self.build_sprite_sheet)
        self.btn_sprite.grid(row=0, column=5, padx=5)

        # Bookmark controls
        self.btn_add_bookmark = tk.Button(self.frame_top, text="Add Bookmark", command=self.add_bookmark)
        self.btn_add_bookmark.grid(row=0, column=6, padx=5)

        self.btn_delete_bookmark = tk.Button(self.frame_top, text="Delete Bookmark", command=self.delete_bookmark)
        self.btn_delete_bookmark.grid(row=0, column=7, padx=5)

        self.bookmark_var = tk.StringVar(self)
        self.bookmark_menu = ttk.Combobox(self.frame_top, textvariable=self.bookmark_var, values=list(self.bookmarks.keys()))
        self.bookmark_menu.grid(row=0, column=8, padx=5)
        self.bookmark_menu.bind("<<ComboboxSelected>>", self.goto_bookmark)

        # Frame for thumbnails
        self.frame_left = tk.Frame(self)
        self.frame_left.grid(row=1, column=0, sticky="nsew", padx=10, pady=10)

        # Canvas for thumbnails
        self.canvas = tk.Canvas(self.frame_left, bg="white", bd=11)
        self.canvas.grid(row=0, column=0, sticky="nsew")

        self.scroll_y = tk.Scrollbar(self.frame_left, orient="vertical", command=self.canvas.yview)
        self.scroll_y.grid(row=0, column=1, sticky="ns")
        self.canvas.config(yscrollcommand=self.scroll_y.set)

        # Frame to hold thumbnails inside the canvas
        self.frame_thumbnails = tk.Frame(self.canvas)
        self.canvas.create_window((0, 0), window=self.frame_thumbnails, anchor="nw")

        # Progress bar for loading indication
        self.progress_label = tk.Label(self.frame_left,text="Below if loading  please wait...").grid(row=1,column=0)
        self.progress_bar = ttk.Progressbar(self.frame_left, orient="horizontal", length=400, mode="determinate")
        self.progress_bar.grid(row=4, column=0, columnspan=2, pady=5, sticky="ew")

        # Frame for file info
        self.frame_right = tk.Frame(self, width=300)
        self.frame_right.grid(row=1, column=1, sticky="nsew", padx=10, pady=10)

        self.lbl_info = tk.Label(self.frame_right, text="File Info", anchor="w")
        self.lbl_info.grid(row=0, column=0, sticky="w", pady=5)

        self.txt_info = tk.Text(self.frame_right, height=8, width=40, wrap="word")
        self.txt_info.grid(row=1, column=0, sticky="nsew")

        self.lbl_selected = tk.Label(self.frame_right, text="Selected Images")
        self.lbl_selected.grid(row=2, column=0, sticky="w", pady=5)

        self.listbox_selected = tk.Listbox(self.frame_right, height=15, width=40)
        self.listbox_selected.grid(row=3, column=0, sticky="nsew")

        # Grid weight configuration
        self.grid_rowconfigure(1, weight=1)
        self.grid_columnconfigure(0, weight=1)
        self.frame_left.grid_rowconfigure(0, weight=1)
        self.frame_left.grid_columnconfigure(0, weight=1)
        self.frame_right.grid_rowconfigure(1, weight=1)

    def load_bookmarks(self):
        """Load bookmarks from a JSON file."""
        try:
            with open(BOOKMARK_FILE, 'r') as file:
                return json.load(file)
        except (FileNotFoundError, json.JSONDecodeError):
            return {}

    def save_bookmarks(self):
        """Save bookmarks to a JSON file."""
        with open(BOOKMARK_FILE, 'w') as file:
            json.dump(self.bookmarks, file, indent=4)

    def add_bookmark(self):
        """Add the current directory to bookmarks."""
        if not self.current_img_path:
            messagebox.showwarning("No Directory", "Select a directory first.")
            return

        dir_name = os.path.basename(os.path.dirname(self.current_img_path))
        bookmark_name = simpledialog.askstring("Bookmark Name", f"Enter a name for this bookmark ({dir_name}):")
        if bookmark_name:
            self.bookmarks[bookmark_name] = os.path.dirname(self.current_img_path)
            self.bookmark_menu['values'] = list(self.bookmarks.keys())
            self.save_bookmarks()
            messagebox.showinfo("Bookmark Added", f"Bookmark '{bookmark_name}' added successfully.")

    def delete_bookmark(self):
        """Delete the selected bookmark."""
        selected_bookmark = self.bookmark_var.get()
        if not selected_bookmark:
            messagebox.showwarning("No Bookmark Selected", "Select a bookmark to delete.")
            return

        del self.bookmarks[selected_bookmark]
        self.bookmark_menu['values'] = list(self.bookmarks.keys())
        self.bookmark_var.set('')
        self.save_bookmarks()
        messagebox.showinfo("Bookmark Deleted", f"Bookmark '{selected_bookmark}' deleted successfully.")

    def goto_bookmark(self, event):
        """Go to the selected bookmark directory."""
        selected_bookmark = self.bookmark_var.get()
        if selected_bookmark and selected_bookmark in self.bookmarks:
            #self.load_images(self.bookmarks[selected_bookmark])
            directory = selected_bookmark
            self.load_images(directory) 
    def browse_directory(self):
        directory = filedialog.askdirectory()
        if not directory:
            return

        self.load_images(directory)

    def load_images(self, directory):
        extensions = ('*.png', '*.jpg', '*.jpeg', '*.bmp', '*.gif', '*.tiff')
        search_pattern = '**/*' if self.var_recursive.get() else '*'

        self.image_paths = []
        for ext in extensions:
            self.image_paths.extend(glob(os.path.join(directory, search_pattern, ext), recursive=self.var_recursive.get()))

        if not self.image_paths:
            messagebox.showinfo("No Images Found", "No images found in the selected directory.")
            return

        self.display_thumbnails()

    def display_thumbnails(self):
        self.progress_bar["maximum"] = len(self.image_paths)
        for idx, img_path in enumerate(self.image_paths):
            try:
                img = Image.open(img_path)
                img.thumbnail((100, 100))
                tk_img = ImageTk.PhotoImage(img)

                frame = tk.Frame(self.frame_thumbnails, bd=2, relief="ridge")
                frame.grid(row=idx // 6, column=idx % 6, padx=5, pady=5)

                lbl_img = tk.Label(frame, image=tk_img)
                lbl_img.image = tk_img
                lbl_img.grid(row=0, column=0)

                lbl_info = tk.Label(frame, text=os.path.basename(img_path), wraplength=100, anchor="w")
                lbl_info.grid(row=1, column=0, sticky="ew")

                lbl_img.bind("<Enter>", lambda e, path=img_path: self.show_file_info(path))
                lbl_img.bind("<Button-1>", lambda e, path=img_path: self.select_image(path))
                lbl_img.bind("<Double-1>", lambda e, path=img_path: self.add_to_selection(path))

                # Update the progress bar
                self.progress_bar.step(1)
                self.progress_bar.update_idletasks()

            except Exception as e:
                print(f"Error loading image {img_path}: {e}")

        self.frame_thumbnails.update_idletasks()
        self.canvas.config(scrollregion=self.canvas.bbox("all"))
        self.progress_bar["value"] = 0

    def show_file_info(self, img_path):
        file_size = os.path.getsize(img_path) / 1024
        last_modified = time.ctime(os.path.getmtime(img_path))

        info_text = (
            f"Path: {img_path}\n"
            f"Size: {file_size:.2f} KB\n"
            f"Last Modified: {last_modified}"
        )

        self.txt_info.delete(1.0, tk.END)
        self.txt_info.insert(tk.END, info_text)
        self.current_img_path = img_path

    def select_image(self, img_path):
        self.show_file_info(img_path)
        self.current_img_path = img_path

    def add_to_selection(self, img_path):
        if img_path not in self.selected_images:
            self.selected_images.append(img_path)
            self.listbox_selected.insert(tk.END, os.path.basename(img_path))

    def unselect_image(self):
        selected_idx = self.listbox_selected.curselection()
        if not selected_idx:
            messagebox.showwarning("No Selection", "Select an image to unselect.")
            return

        selected_file = self.listbox_selected.get(selected_idx)
        self.listbox_selected.delete(selected_idx)
        self.selected_images = [img for img in self.selected_images if os.path.basename(img) != selected_file]

    def view_full_image(self):
        if not self.current_img_path:
            messagebox.showwarning("No Image Selected", "Select an image to view.")
            return

        try:
            img = Image.open(self.current_img_path)
            top = tk.Toplevel(self)
            top.title("Full Image View")

            tk_img = ImageTk.PhotoImage(img)
            lbl_full_img = tk.Label(top, image=tk_img)
            lbl_full_img.image = tk_img
            lbl_full_img.pack()

            self.show_file_info(self.current_img_path)

        except Exception as e:
            messagebox.showerror("Error", f"Error opening image: {e}")

    def merge_images(self):
        if len(self.selected_images) < 2:
            messagebox.showwarning("Not Enough Images", "Select at least two images to merge.")
            return

        images = [Image.open(img) for img in self.selected_images]
        total_width = sum(img.width for img in images)
        max_height = max(img.height for img in images)

        merged_image = Image.new('RGB', (total_width, max_height))
        x_offset = 0

        for img in images:
            merged_image.paste(img, (x_offset, 0))
            x_offset += img.width

        self.display_merged_image(merged_image)

    def display_merged_image(self, image):
        img = image.resize((800, 600))
        tk_img = ImageTk.PhotoImage(img)
        self.canvas.create_image(400, 300, anchor=tk.CENTER, image=tk_img)
        self.canvas.image = tk_img

    def build_sprite_sheet(self):
        if not self.selected_images:
            messagebox.showwarning("No Images", "Select images to create a sprite sheet.")
            return

        try:
            columns = simpledialog.askinteger("Columns", "Enter number of columns:", minvalue=1)
            if not columns:
                return

            rows = (len(self.selected_images) + columns - 1) // columns
            img_width, img_height = Image.open(self.selected_images[0]).size

            sprite_sheet = Image.new('RGBA', (img_width * columns, img_height * rows))
            for idx, img_path in enumerate(self.selected_images):
                img = Image.open(img_path)
                row, col = divmod(idx, columns)
                sprite_sheet.paste(img, (col * img_width, row * img_height))

            self.display_merged_image(sprite_sheet)
            messagebox.showinfo("Sprite Sheet Complete", "Sprite sheet built successfully.")
        except Exception as e:
            messagebox.showerror("Error", str(e))

    def update_view(self):
        self.browse_directory()
----------------------------------------

File: /home/jh/Desktop/Local_Python/IMAGE_PHOTO_SCRIPTS_APPS/Thumbnailer_image_pro_V6.py
Name: __init__
Type: Function
Description: No description available
Code:
    def __init__(self):
        super().__init__()
        self.title("Image Tool Suite")
        self.geometry("1400x800")

        # Initialize attributes
        self.image_paths = []
        self.selected_images = []
        self.current_img_path = None
        self.bookmarks = self.load_bookmarks()

        # Top frame for options
        self.frame_top = tk.Frame(self)
        self.frame_top.grid(row=0, column=0, columnspan=2, sticky="ew", padx=10, pady=10)

        self.btn_browse = tk.Button(self.frame_top, text="Select Directory", command=self.browse_directory)
        self.btn_browse.grid(row=0, column=0, padx=5)

        self.var_recursive = tk.BooleanVar()
        self.check_recursive = tk.Checkbutton(
            self.frame_top, text="Recursive View", variable=self.var_recursive, command=self.update_view
        )
        self.check_recursive.grid(row=0, column=1, padx=5)

        self.btn_view_full = tk.Button(self.frame_top, text="View Full Image", command=self.view_full_image)
        self.btn_view_full.grid(row=0, column=2, padx=5)

        self.btn_unselect = tk.Button(self.frame_top, text="Unselect", command=self.unselect_image)
        self.btn_unselect.grid(row=0, column=3, padx=5)

        self.btn_merge = tk.Button(self.frame_top, text="Merge Images", command=self.merge_images)
        self.btn_merge.grid(row=0, column=4, padx=5)

        self.btn_sprite = tk.Button(self.frame_top, text="Build Sprite Sheet", command=self.build_sprite_sheet)
        self.btn_sprite.grid(row=0, column=5, padx=5)

        # Bookmark controls
        self.btn_add_bookmark = tk.Button(self.frame_top, text="Add Bookmark", command=self.add_bookmark)
        self.btn_add_bookmark.grid(row=0, column=6, padx=5)

        self.btn_delete_bookmark = tk.Button(self.frame_top, text="Delete Bookmark", command=self.delete_bookmark)
        self.btn_delete_bookmark.grid(row=0, column=7, padx=5)

        self.bookmark_var = tk.StringVar(self)
        self.bookmark_menu = ttk.Combobox(self.frame_top, textvariable=self.bookmark_var, values=list(self.bookmarks.keys()))
        self.bookmark_menu.grid(row=0, column=8, padx=5)
        self.bookmark_menu.bind("<<ComboboxSelected>>", self.goto_bookmark)

        # Frame for thumbnails
        self.frame_left = tk.Frame(self)
        self.frame_left.grid(row=1, column=0, sticky="nsew", padx=10, pady=10)

        # Canvas for thumbnails
        self.canvas = tk.Canvas(self.frame_left, bg="white", bd=11)
        self.canvas.grid(row=0, column=0, sticky="nsew")

        self.scroll_y = tk.Scrollbar(self.frame_left, orient="vertical", command=self.canvas.yview)
        self.scroll_y.grid(row=0, column=1, sticky="ns")
        self.canvas.config(yscrollcommand=self.scroll_y.set)

        # Frame to hold thumbnails inside the canvas
        self.frame_thumbnails = tk.Frame(self.canvas)
        self.canvas.create_window((0, 0), window=self.frame_thumbnails, anchor="nw")

        # Progress bar for loading indication
        self.progress_label = tk.Label(self.frame_left,text="Below if loading  please wait...").grid(row=1,column=0)
        self.progress_bar = ttk.Progressbar(self.frame_left, orient="horizontal", length=400, mode="determinate")
        self.progress_bar.grid(row=4, column=0, columnspan=2, pady=5, sticky="ew")

        # Frame for file info
        self.frame_right = tk.Frame(self, width=300)
        self.frame_right.grid(row=1, column=1, sticky="nsew", padx=10, pady=10)

        self.lbl_info = tk.Label(self.frame_right, text="File Info", anchor="w")
        self.lbl_info.grid(row=0, column=0, sticky="w", pady=5)

        self.txt_info = tk.Text(self.frame_right, height=8, width=40, wrap="word")
        self.txt_info.grid(row=1, column=0, sticky="nsew")

        self.lbl_selected = tk.Label(self.frame_right, text="Selected Images")
        self.lbl_selected.grid(row=2, column=0, sticky="w", pady=5)

        self.listbox_selected = tk.Listbox(self.frame_right, height=15, width=40)
        self.listbox_selected.grid(row=3, column=0, sticky="nsew")

        # Grid weight configuration
        self.grid_rowconfigure(1, weight=1)
        self.grid_columnconfigure(0, weight=1)
        self.frame_left.grid_rowconfigure(0, weight=1)
        self.frame_left.grid_columnconfigure(0, weight=1)
        self.frame_right.grid_rowconfigure(1, weight=1)
----------------------------------------

File: /home/jh/Desktop/Local_Python/IMAGE_PHOTO_SCRIPTS_APPS/Thumbnailer_image_pro_V6.py
Name: load_bookmarks
Type: Function
Description: Load bookmarks from a JSON file.
Code:
    def load_bookmarks(self):
        """Load bookmarks from a JSON file."""
        try:
            with open(BOOKMARK_FILE, 'r') as file:
                return json.load(file)
        except (FileNotFoundError, json.JSONDecodeError):
            return {}
----------------------------------------

File: /home/jh/Desktop/Local_Python/IMAGE_PHOTO_SCRIPTS_APPS/Thumbnailer_image_pro_V6.py
Name: save_bookmarks
Type: Function
Description: Save bookmarks to a JSON file.
Code:
    def save_bookmarks(self):
        """Save bookmarks to a JSON file."""
        with open(BOOKMARK_FILE, 'w') as file:
            json.dump(self.bookmarks, file, indent=4)
----------------------------------------

File: /home/jh/Desktop/Local_Python/IMAGE_PHOTO_SCRIPTS_APPS/Thumbnailer_image_pro_V6.py
Name: add_bookmark
Type: Function
Description: Add the current directory to bookmarks.
Code:
    def add_bookmark(self):
        """Add the current directory to bookmarks."""
        if not self.current_img_path:
            messagebox.showwarning("No Directory", "Select a directory first.")
            return

        dir_name = os.path.basename(os.path.dirname(self.current_img_path))
        bookmark_name = simpledialog.askstring("Bookmark Name", f"Enter a name for this bookmark ({dir_name}):")
        if bookmark_name:
            self.bookmarks[bookmark_name] = os.path.dirname(self.current_img_path)
            self.bookmark_menu['values'] = list(self.bookmarks.keys())
            self.save_bookmarks()
            messagebox.showinfo("Bookmark Added", f"Bookmark '{bookmark_name}' added successfully.")
----------------------------------------

File: /home/jh/Desktop/Local_Python/IMAGE_PHOTO_SCRIPTS_APPS/Thumbnailer_image_pro_V6.py
Name: delete_bookmark
Type: Function
Description: Delete the selected bookmark.
Code:
    def delete_bookmark(self):
        """Delete the selected bookmark."""
        selected_bookmark = self.bookmark_var.get()
        if not selected_bookmark:
            messagebox.showwarning("No Bookmark Selected", "Select a bookmark to delete.")
            return

        del self.bookmarks[selected_bookmark]
        self.bookmark_menu['values'] = list(self.bookmarks.keys())
        self.bookmark_var.set('')
        self.save_bookmarks()
        messagebox.showinfo("Bookmark Deleted", f"Bookmark '{selected_bookmark}' deleted successfully.")
----------------------------------------

File: /home/jh/Desktop/Local_Python/IMAGE_PHOTO_SCRIPTS_APPS/Thumbnailer_image_pro_V6.py
Name: goto_bookmark
Type: Function
Description: Go to the selected bookmark directory.
Code:
    def goto_bookmark(self, event):
        """Go to the selected bookmark directory."""
        selected_bookmark = self.bookmark_var.get()
        if selected_bookmark and selected_bookmark in self.bookmarks:
            #self.load_images(self.bookmarks[selected_bookmark])
            directory = selected_bookmark
            self.load_images(directory) 
----------------------------------------

File: /home/jh/Desktop/Local_Python/IMAGE_PHOTO_SCRIPTS_APPS/Thumbnailer_image_pro_V6.py
Name: browse_directory
Type: Function
Description: No description available
Code:
    def browse_directory(self):
        directory = filedialog.askdirectory()
        if not directory:
            return

        self.load_images(directory)
----------------------------------------

File: /home/jh/Desktop/Local_Python/IMAGE_PHOTO_SCRIPTS_APPS/Thumbnailer_image_pro_V6.py
Name: load_images
Type: Function
Description: No description available
Code:
    def load_images(self, directory):
        extensions = ('*.png', '*.jpg', '*.jpeg', '*.bmp', '*.gif', '*.tiff')
        search_pattern = '**/*' if self.var_recursive.get() else '*'

        self.image_paths = []
        for ext in extensions:
            self.image_paths.extend(glob(os.path.join(directory, search_pattern, ext), recursive=self.var_recursive.get()))

        if not self.image_paths:
            messagebox.showinfo("No Images Found", "No images found in the selected directory.")
            return

        self.display_thumbnails()
----------------------------------------

File: /home/jh/Desktop/Local_Python/IMAGE_PHOTO_SCRIPTS_APPS/Thumbnailer_image_pro_V6.py
Name: display_thumbnails
Type: Function
Description: No description available
Code:
    def display_thumbnails(self):
        self.progress_bar["maximum"] = len(self.image_paths)
        for idx, img_path in enumerate(self.image_paths):
            try:
                img = Image.open(img_path)
                img.thumbnail((100, 100))
                tk_img = ImageTk.PhotoImage(img)

                frame = tk.Frame(self.frame_thumbnails, bd=2, relief="ridge")
                frame.grid(row=idx // 6, column=idx % 6, padx=5, pady=5)

                lbl_img = tk.Label(frame, image=tk_img)
                lbl_img.image = tk_img
                lbl_img.grid(row=0, column=0)

                lbl_info = tk.Label(frame, text=os.path.basename(img_path), wraplength=100, anchor="w")
                lbl_info.grid(row=1, column=0, sticky="ew")

                lbl_img.bind("<Enter>", lambda e, path=img_path: self.show_file_info(path))
                lbl_img.bind("<Button-1>", lambda e, path=img_path: self.select_image(path))
                lbl_img.bind("<Double-1>", lambda e, path=img_path: self.add_to_selection(path))

                # Update the progress bar
                self.progress_bar.step(1)
                self.progress_bar.update_idletasks()

            except Exception as e:
                print(f"Error loading image {img_path}: {e}")

        self.frame_thumbnails.update_idletasks()
        self.canvas.config(scrollregion=self.canvas.bbox("all"))
        self.progress_bar["value"] = 0
----------------------------------------

File: /home/jh/Desktop/Local_Python/IMAGE_PHOTO_SCRIPTS_APPS/Thumbnailer_image_pro_V6.py
Name: show_file_info
Type: Function
Description: No description available
Code:
    def show_file_info(self, img_path):
        file_size = os.path.getsize(img_path) / 1024
        last_modified = time.ctime(os.path.getmtime(img_path))

        info_text = (
            f"Path: {img_path}\n"
            f"Size: {file_size:.2f} KB\n"
            f"Last Modified: {last_modified}"
        )

        self.txt_info.delete(1.0, tk.END)
        self.txt_info.insert(tk.END, info_text)
        self.current_img_path = img_path
----------------------------------------

File: /home/jh/Desktop/Local_Python/IMAGE_PHOTO_SCRIPTS_APPS/Thumbnailer_image_pro_V6.py
Name: select_image
Type: Function
Description: No description available
Code:
    def select_image(self, img_path):
        self.show_file_info(img_path)
        self.current_img_path = img_path
----------------------------------------

File: /home/jh/Desktop/Local_Python/IMAGE_PHOTO_SCRIPTS_APPS/Thumbnailer_image_pro_V6.py
Name: add_to_selection
Type: Function
Description: No description available
Code:
    def add_to_selection(self, img_path):
        if img_path not in self.selected_images:
            self.selected_images.append(img_path)
            self.listbox_selected.insert(tk.END, os.path.basename(img_path))
----------------------------------------

File: /home/jh/Desktop/Local_Python/IMAGE_PHOTO_SCRIPTS_APPS/Thumbnailer_image_pro_V6.py
Name: unselect_image
Type: Function
Description: No description available
Code:
    def unselect_image(self):
        selected_idx = self.listbox_selected.curselection()
        if not selected_idx:
            messagebox.showwarning("No Selection", "Select an image to unselect.")
            return

        selected_file = self.listbox_selected.get(selected_idx)
        self.listbox_selected.delete(selected_idx)
        self.selected_images = [img for img in self.selected_images if os.path.basename(img) != selected_file]
----------------------------------------

File: /home/jh/Desktop/Local_Python/IMAGE_PHOTO_SCRIPTS_APPS/Thumbnailer_image_pro_V6.py
Name: view_full_image
Type: Function
Description: No description available
Code:
    def view_full_image(self):
        if not self.current_img_path:
            messagebox.showwarning("No Image Selected", "Select an image to view.")
            return

        try:
            img = Image.open(self.current_img_path)
            top = tk.Toplevel(self)
            top.title("Full Image View")

            tk_img = ImageTk.PhotoImage(img)
            lbl_full_img = tk.Label(top, image=tk_img)
            lbl_full_img.image = tk_img
            lbl_full_img.pack()

            self.show_file_info(self.current_img_path)

        except Exception as e:
            messagebox.showerror("Error", f"Error opening image: {e}")
----------------------------------------

File: /home/jh/Desktop/Local_Python/IMAGE_PHOTO_SCRIPTS_APPS/Thumbnailer_image_pro_V6.py
Name: merge_images
Type: Function
Description: No description available
Code:
    def merge_images(self):
        if len(self.selected_images) < 2:
            messagebox.showwarning("Not Enough Images", "Select at least two images to merge.")
            return

        images = [Image.open(img) for img in self.selected_images]
        total_width = sum(img.width for img in images)
        max_height = max(img.height for img in images)

        merged_image = Image.new('RGB', (total_width, max_height))
        x_offset = 0

        for img in images:
            merged_image.paste(img, (x_offset, 0))
            x_offset += img.width

        self.display_merged_image(merged_image)
----------------------------------------

File: /home/jh/Desktop/Local_Python/IMAGE_PHOTO_SCRIPTS_APPS/Thumbnailer_image_pro_V6.py
Name: display_merged_image
Type: Function
Description: No description available
Code:
    def display_merged_image(self, image):
        img = image.resize((800, 600))
        tk_img = ImageTk.PhotoImage(img)
        self.canvas.create_image(400, 300, anchor=tk.CENTER, image=tk_img)
        self.canvas.image = tk_img
----------------------------------------

File: /home/jh/Desktop/Local_Python/IMAGE_PHOTO_SCRIPTS_APPS/Thumbnailer_image_pro_V6.py
Name: build_sprite_sheet
Type: Function
Description: No description available
Code:
    def build_sprite_sheet(self):
        if not self.selected_images:
            messagebox.showwarning("No Images", "Select images to create a sprite sheet.")
            return

        try:
            columns = simpledialog.askinteger("Columns", "Enter number of columns:", minvalue=1)
            if not columns:
                return

            rows = (len(self.selected_images) + columns - 1) // columns
            img_width, img_height = Image.open(self.selected_images[0]).size

            sprite_sheet = Image.new('RGBA', (img_width * columns, img_height * rows))
            for idx, img_path in enumerate(self.selected_images):
                img = Image.open(img_path)
                row, col = divmod(idx, columns)
                sprite_sheet.paste(img, (col * img_width, row * img_height))

            self.display_merged_image(sprite_sheet)
            messagebox.showinfo("Sprite Sheet Complete", "Sprite sheet built successfully.")
        except Exception as e:
            messagebox.showerror("Error", str(e))
----------------------------------------

File: /home/jh/Desktop/Local_Python/IMAGE_PHOTO_SCRIPTS_APPS/Thumbnailer_image_pro_V6.py
Name: update_view
Type: Function
Description: No description available
Code:
    def update_view(self):
        self.browse_directory()
----------------------------------------

File: /home/jh/Desktop/Local_Python/IMAGE_PHOTO_SCRIPTS_APPS/thumbnailer_version.py
Name: ImageToolApp
Type: Class
Description: No description available
Code:
class ImageToolApp(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title("Image Tool Suite")
        self.geometry("1400x800")

        # Initialize attributes
        self.image_paths = []
        self.selected_images = []  # To store selected images for merging or sprite sheet
        self.merged_image = None
        self.sprite_sheet = None

        # Top frame for options
        self.frame_top = tk.Frame(self)
        self.frame_top.pack(fill=tk.X, padx=10, pady=10)

        self.btn_browse = tk.Button(self.frame_top, text="Select Directory", command=self.browse_directory)
        self.btn_browse.pack(side=tk.LEFT, padx=5)

        self.var_recursive = tk.BooleanVar()
        self.check_recursive = tk.Checkbutton(
            self.frame_top, text="Recursive View", variable=self.var_recursive, command=self.update_view
        )
        self.check_recursive.pack(side=tk.LEFT, padx=5)

        self.btn_resize = tk.Button(self.frame_top, text="Resize Images", command=self.resize_images)
        self.btn_resize.pack(side=tk.LEFT, padx=5)

        self.btn_merge = tk.Button(self.frame_top, text="Merge Images", command=self.merge_images)
        self.btn_merge.pack(side=tk.LEFT, padx=5)

        self.btn_sprite = tk.Button(self.frame_top, text="Build Sprite Sheet", command=self.build_sprite_sheet)
        self.btn_sprite.pack(side=tk.LEFT, padx=5)

        self.btn_unselect = tk.Button(self.frame_top, text="Unselect", command=self.unselect_image)
        self.btn_unselect.pack(side=tk.LEFT, padx=5)

        # Frame for thumbnails and info
        self.frame_left = tk.Frame(self)
        self.frame_left.pack(side=tk.LEFT, fill=tk.Y, padx=10, pady=10)

        # Canvas for thumbnails
        self.canvas = tk.Canvas(self.frame_left, bg="white",bd=11,width=800,height=40)
        self.canvas.pack(side=tk.TOP, fill=tk.BOTH, expand=True)

        self.scroll_y = tk.Scrollbar(self.frame_left, orient="vertical", command=self.canvas.yview)
        self.scroll_y.pack(side=tk.RIGHT, fill=tk.Y)
        self.canvas.config(yscrollcommand=self.scroll_y.set)

        # Frame to hold thumbnails inside the canvas
        self.frame_thumbnails = tk.Frame(self.canvas)
        self.canvas.create_window((0, 0), window=self.frame_thumbnails, anchor="nw")

        # Frame for selected images and file info
        self.frame_right = tk.Frame(self, width=300)
        self.frame_right.pack(side=tk.RIGHT, fill=tk.Y, padx=10, pady=10)

        self.lbl_selected = tk.Label(self.frame_right, text="Selected Images")
        self.lbl_selected.pack(anchor="w")

        self.listbox_selected = tk.Listbox(self.frame_right, height=15, width=40)
        self.listbox_selected.pack(fill=tk.BOTH, expand=True, pady=5)

        self.lbl_info = tk.Label(self.frame_right, text="File Info", anchor="w")
        self.lbl_info.pack(anchor="w", pady=5)

        self.txt_info = tk.Text(self.frame_right, height=8, width=40, wrap="word")
        self.txt_info.pack(fill=tk.BOTH, expand=True)

    def browse_directory(self):
        directory = filedialog.askdirectory()
        if not directory:
            return

        self.image_paths.clear()
        self.selected_images.clear()
        self.listbox_selected.delete(0, tk.END)

        self.canvas.delete("all")
        self.frame_thumbnails.destroy()
        self.frame_thumbnails = tk.Frame(self.canvas)
        self.canvas.create_window((0, 0), window=self.frame_thumbnails, anchor="nw")

        self.load_images(directory)

    def load_images(self, directory):
        extensions = ('*.png', '*.jpg', '*.jpeg', '*.bmp', '*.gif', '*.tiff')
        search_pattern = '**/*' if self.var_recursive.get() else '*'

        # Get image files based on recursive or flat view
        self.image_paths = []
        for ext in extensions:
            self.image_paths.extend(glob(os.path.join(directory, search_pattern, ext), recursive=self.var_recursive.get()))

        if not self.image_paths:
            messagebox.showinfo("No Images Found", "No images found in the selected directory.")
            return

        self.display_thumbnails()

    def display_thumbnails(self):
        for idx, img_path in enumerate(self.image_paths):
            try:
                img = Image.open(img_path)
                img.thumbnail((100, 100))
                tk_img = ImageTk.PhotoImage(img)

                frame = tk.Frame(self.frame_thumbnails, bd=2, relief="ridge")
                frame.grid(row=idx//6, column=idx%6, padx=5, pady=5)

                lbl_img = tk.Label(frame, image=tk_img)
                lbl_img.image = tk_img  # Keep a reference to avoid garbage collection
                lbl_img.pack()

                lbl_info = tk.Label(frame, text=os.path.basename(img_path), wraplength=100, anchor="w")
                lbl_info.pack(fill=tk.X)

                lbl_img.bind("<Double-1>", lambda e, path=img_path: self.select_image(path))
                lbl_img.bind("<Enter>", lambda e, path=img_path: self.show_file_info(path))

            except Exception as e:
                print(f"Error loading image {img_path}: {e}")

        self.frame_thumbnails.update_idletasks()
        self.canvas.config(scrollregion=self.canvas.bbox("all"))

    def select_image(self, img_path):
        """Adds image to the selected images list for merging or sprite sheet."""
        if img_path not in self.selected_images:
            self.selected_images.append(img_path)
            self.listbox_selected.insert(tk.END, os.path.basename(img_path))
            messagebox.showinfo("Selected", f"{os.path.basename(img_path)} added to the selection.")

    def unselect_image(self):
        """Removes selected image from the list of selected images."""
        selected_idx = self.listbox_selected.curselection()
        if not selected_idx:
            messagebox.showwarning("No Selection", "Select an image to unselect.")
            return

        selected_file = self.listbox_selected.get(selected_idx)
        self.listbox_selected.delete(selected_idx)
        self.selected_images = [img for img in self.selected_images if os.path.basename(img) != selected_file]
        messagebox.showinfo("Unselected", f"{selected_file} removed from the selection.")

    def show_file_info(self, img_path):
        """Displays detailed information of the highlighted image."""
        file_size = os.path.getsize(img_path) / 1024  # File size in KB
        last_modified = time.ctime(os.path.getmtime(img_path))

        info_text = (
            f"Path: {img_path}\n"
            f"Size: {file_size:.2f} KB\n"
            f"Last Modified: {last_modified}"
        )

        self.txt_info.delete(1.0, tk.END)
        self.txt_info.insert(tk.END, info_text)

    def update_view(self):
        """Reload images when the recursive view option is toggled."""
        self.browse_directory()

    def resize_images(self):
        if not self.image_paths:
            messagebox.showwarning("No Images", "No images to resize.")
            return

        resize_factor = simpledialog.askfloat("Resize Factor", "Enter resize factor (e.g., 0.8 for 80%):", minvalue=0.1, maxvalue=1.0)
        if resize_factor is None:
            return

        output_folder = os.path.join(os.path.dirname(self.image_paths[0]), f'resized_output_{int(time.time())}')
        os.makedirs(output_folder, exist_ok=True)

        for img_path in self.image_paths:
            try:
                img = Image.open(img_path)
                new_size = (int(img.width * resize_factor), int(img.height * resize_factor))
                resized_img = img.resize(new_size, Image.Resampling.LANCZOS)
                resized_img.save(os.path.join(output_folder, os.path.basename(img_path)))
                print(f"Resized and saved: {os.path.basename(img_path)}")
            except Exception as e:
                print(f"Error resizing image {os.path.basename(img_path)}: {e}")

        messagebox.showinfo("Resizing Complete", f"Images resized and saved to {output_folder}.")

    def merge_images(self):
        if len(self.selected_images) < 2:
            messagebox.showwarning("Not Enough Images", "Select at least two images to merge.")
            return

        images = [Image.open(img) for img in self.selected_images]
        total_width = sum(img.width for img in images)
        max_height = max(img.height for img in images)

        self.merged_image = Image.new('RGB', (total_width, max_height))
        x_offset = 0

        for img in images:
            self.merged_image.paste(img, (x_offset, 0))
            x_offset += img.width

        self.display_merged_image(self.merged_image)

    def display_merged_image(self, image):
        img = image.resize((800, 600))
        tk_img = ImageTk.PhotoImage(img)
        self.canvas.create_image(400, 300, anchor=tk.CENTER, image=tk_img)
        self.canvas.image = tk_img  # Keep a reference to avoid garbage collection

    def build_sprite_sheet(self):
        if not self.selected_images:
            messagebox.showwarning("No Images", "Select images to create a sprite sheet.")
            return

        try:
            columns = simpledialog.askinteger("Columns", "Enter number of columns:", minvalue=1)
            if not columns:
                return

            rows = (len(self.selected_images) + columns - 1) // columns
            img_width, img_height = Image.open(self.selected_images[0]).size

            self.sprite_sheet = Image.new('RGBA', (img_width * columns, img_height * rows))
            for idx, img_path in enumerate(self.selected_images):
                img = Image.open(img_path)
                row, col = divmod(idx, columns)
                self.sprite_sheet.paste(img, (col * img_width, row * img_height))

            self.display_merged_image(self.sprite_sheet)
            messagebox.showinfo("Sprite Sheet Complete", "Sprite sheet built successfully.")
        except Exception as e:
            messagebox.showerror("Error", str(e))
----------------------------------------

File: /home/jh/Desktop/Local_Python/IMAGE_PHOTO_SCRIPTS_APPS/thumbnailer_version.py
Name: __init__
Type: Function
Description: No description available
Code:
    def __init__(self):
        super().__init__()
        self.title("Image Tool Suite")
        self.geometry("1400x800")

        # Initialize attributes
        self.image_paths = []
        self.selected_images = []  # To store selected images for merging or sprite sheet
        self.merged_image = None
        self.sprite_sheet = None

        # Top frame for options
        self.frame_top = tk.Frame(self)
        self.frame_top.pack(fill=tk.X, padx=10, pady=10)

        self.btn_browse = tk.Button(self.frame_top, text="Select Directory", command=self.browse_directory)
        self.btn_browse.pack(side=tk.LEFT, padx=5)

        self.var_recursive = tk.BooleanVar()
        self.check_recursive = tk.Checkbutton(
            self.frame_top, text="Recursive View", variable=self.var_recursive, command=self.update_view
        )
        self.check_recursive.pack(side=tk.LEFT, padx=5)

        self.btn_resize = tk.Button(self.frame_top, text="Resize Images", command=self.resize_images)
        self.btn_resize.pack(side=tk.LEFT, padx=5)

        self.btn_merge = tk.Button(self.frame_top, text="Merge Images", command=self.merge_images)
        self.btn_merge.pack(side=tk.LEFT, padx=5)

        self.btn_sprite = tk.Button(self.frame_top, text="Build Sprite Sheet", command=self.build_sprite_sheet)
        self.btn_sprite.pack(side=tk.LEFT, padx=5)

        self.btn_unselect = tk.Button(self.frame_top, text="Unselect", command=self.unselect_image)
        self.btn_unselect.pack(side=tk.LEFT, padx=5)

        # Frame for thumbnails and info
        self.frame_left = tk.Frame(self)
        self.frame_left.pack(side=tk.LEFT, fill=tk.Y, padx=10, pady=10)

        # Canvas for thumbnails
        self.canvas = tk.Canvas(self.frame_left, bg="white",bd=11,width=800,height=40)
        self.canvas.pack(side=tk.TOP, fill=tk.BOTH, expand=True)

        self.scroll_y = tk.Scrollbar(self.frame_left, orient="vertical", command=self.canvas.yview)
        self.scroll_y.pack(side=tk.RIGHT, fill=tk.Y)
        self.canvas.config(yscrollcommand=self.scroll_y.set)

        # Frame to hold thumbnails inside the canvas
        self.frame_thumbnails = tk.Frame(self.canvas)
        self.canvas.create_window((0, 0), window=self.frame_thumbnails, anchor="nw")

        # Frame for selected images and file info
        self.frame_right = tk.Frame(self, width=300)
        self.frame_right.pack(side=tk.RIGHT, fill=tk.Y, padx=10, pady=10)

        self.lbl_selected = tk.Label(self.frame_right, text="Selected Images")
        self.lbl_selected.pack(anchor="w")

        self.listbox_selected = tk.Listbox(self.frame_right, height=15, width=40)
        self.listbox_selected.pack(fill=tk.BOTH, expand=True, pady=5)

        self.lbl_info = tk.Label(self.frame_right, text="File Info", anchor="w")
        self.lbl_info.pack(anchor="w", pady=5)

        self.txt_info = tk.Text(self.frame_right, height=8, width=40, wrap="word")
        self.txt_info.pack(fill=tk.BOTH, expand=True)
----------------------------------------

File: /home/jh/Desktop/Local_Python/IMAGE_PHOTO_SCRIPTS_APPS/thumbnailer_version.py
Name: browse_directory
Type: Function
Description: No description available
Code:
    def browse_directory(self):
        directory = filedialog.askdirectory()
        if not directory:
            return

        self.image_paths.clear()
        self.selected_images.clear()
        self.listbox_selected.delete(0, tk.END)

        self.canvas.delete("all")
        self.frame_thumbnails.destroy()
        self.frame_thumbnails = tk.Frame(self.canvas)
        self.canvas.create_window((0, 0), window=self.frame_thumbnails, anchor="nw")

        self.load_images(directory)
----------------------------------------

File: /home/jh/Desktop/Local_Python/IMAGE_PHOTO_SCRIPTS_APPS/thumbnailer_version.py
Name: load_images
Type: Function
Description: No description available
Code:
    def load_images(self, directory):
        extensions = ('*.png', '*.jpg', '*.jpeg', '*.bmp', '*.gif', '*.tiff')
        search_pattern = '**/*' if self.var_recursive.get() else '*'

        # Get image files based on recursive or flat view
        self.image_paths = []
        for ext in extensions:
            self.image_paths.extend(glob(os.path.join(directory, search_pattern, ext), recursive=self.var_recursive.get()))

        if not self.image_paths:
            messagebox.showinfo("No Images Found", "No images found in the selected directory.")
            return

        self.display_thumbnails()
----------------------------------------

File: /home/jh/Desktop/Local_Python/IMAGE_PHOTO_SCRIPTS_APPS/thumbnailer_version.py
Name: display_thumbnails
Type: Function
Description: No description available
Code:
    def display_thumbnails(self):
        for idx, img_path in enumerate(self.image_paths):
            try:
                img = Image.open(img_path)
                img.thumbnail((100, 100))
                tk_img = ImageTk.PhotoImage(img)

                frame = tk.Frame(self.frame_thumbnails, bd=2, relief="ridge")
                frame.grid(row=idx//6, column=idx%6, padx=5, pady=5)

                lbl_img = tk.Label(frame, image=tk_img)
                lbl_img.image = tk_img  # Keep a reference to avoid garbage collection
                lbl_img.pack()

                lbl_info = tk.Label(frame, text=os.path.basename(img_path), wraplength=100, anchor="w")
                lbl_info.pack(fill=tk.X)

                lbl_img.bind("<Double-1>", lambda e, path=img_path: self.select_image(path))
                lbl_img.bind("<Enter>", lambda e, path=img_path: self.show_file_info(path))

            except Exception as e:
                print(f"Error loading image {img_path}: {e}")

        self.frame_thumbnails.update_idletasks()
        self.canvas.config(scrollregion=self.canvas.bbox("all"))
----------------------------------------

File: /home/jh/Desktop/Local_Python/IMAGE_PHOTO_SCRIPTS_APPS/thumbnailer_version.py
Name: select_image
Type: Function
Description: Adds image to the selected images list for merging or sprite sheet.
Code:
    def select_image(self, img_path):
        """Adds image to the selected images list for merging or sprite sheet."""
        if img_path not in self.selected_images:
            self.selected_images.append(img_path)
            self.listbox_selected.insert(tk.END, os.path.basename(img_path))
            messagebox.showinfo("Selected", f"{os.path.basename(img_path)} added to the selection.")
----------------------------------------

File: /home/jh/Desktop/Local_Python/IMAGE_PHOTO_SCRIPTS_APPS/thumbnailer_version.py
Name: unselect_image
Type: Function
Description: Removes selected image from the list of selected images.
Code:
    def unselect_image(self):
        """Removes selected image from the list of selected images."""
        selected_idx = self.listbox_selected.curselection()
        if not selected_idx:
            messagebox.showwarning("No Selection", "Select an image to unselect.")
            return

        selected_file = self.listbox_selected.get(selected_idx)
        self.listbox_selected.delete(selected_idx)
        self.selected_images = [img for img in self.selected_images if os.path.basename(img) != selected_file]
        messagebox.showinfo("Unselected", f"{selected_file} removed from the selection.")
----------------------------------------

File: /home/jh/Desktop/Local_Python/IMAGE_PHOTO_SCRIPTS_APPS/thumbnailer_version.py
Name: show_file_info
Type: Function
Description: Displays detailed information of the highlighted image.
Code:
    def show_file_info(self, img_path):
        """Displays detailed information of the highlighted image."""
        file_size = os.path.getsize(img_path) / 1024  # File size in KB
        last_modified = time.ctime(os.path.getmtime(img_path))

        info_text = (
            f"Path: {img_path}\n"
            f"Size: {file_size:.2f} KB\n"
            f"Last Modified: {last_modified}"
        )

        self.txt_info.delete(1.0, tk.END)
        self.txt_info.insert(tk.END, info_text)
----------------------------------------

File: /home/jh/Desktop/Local_Python/IMAGE_PHOTO_SCRIPTS_APPS/thumbnailer_version.py
Name: update_view
Type: Function
Description: Reload images when the recursive view option is toggled.
Code:
    def update_view(self):
        """Reload images when the recursive view option is toggled."""
        self.browse_directory()
----------------------------------------

File: /home/jh/Desktop/Local_Python/IMAGE_PHOTO_SCRIPTS_APPS/thumbnailer_version.py
Name: resize_images
Type: Function
Description: No description available
Code:
    def resize_images(self):
        if not self.image_paths:
            messagebox.showwarning("No Images", "No images to resize.")
            return

        resize_factor = simpledialog.askfloat("Resize Factor", "Enter resize factor (e.g., 0.8 for 80%):", minvalue=0.1, maxvalue=1.0)
        if resize_factor is None:
            return

        output_folder = os.path.join(os.path.dirname(self.image_paths[0]), f'resized_output_{int(time.time())}')
        os.makedirs(output_folder, exist_ok=True)

        for img_path in self.image_paths:
            try:
                img = Image.open(img_path)
                new_size = (int(img.width * resize_factor), int(img.height * resize_factor))
                resized_img = img.resize(new_size, Image.Resampling.LANCZOS)
                resized_img.save(os.path.join(output_folder, os.path.basename(img_path)))
                print(f"Resized and saved: {os.path.basename(img_path)}")
            except Exception as e:
                print(f"Error resizing image {os.path.basename(img_path)}: {e}")

        messagebox.showinfo("Resizing Complete", f"Images resized and saved to {output_folder}.")
----------------------------------------

File: /home/jh/Desktop/Local_Python/IMAGE_PHOTO_SCRIPTS_APPS/thumbnailer_version.py
Name: merge_images
Type: Function
Description: No description available
Code:
    def merge_images(self):
        if len(self.selected_images) < 2:
            messagebox.showwarning("Not Enough Images", "Select at least two images to merge.")
            return

        images = [Image.open(img) for img in self.selected_images]
        total_width = sum(img.width for img in images)
        max_height = max(img.height for img in images)

        self.merged_image = Image.new('RGB', (total_width, max_height))
        x_offset = 0

        for img in images:
            self.merged_image.paste(img, (x_offset, 0))
            x_offset += img.width

        self.display_merged_image(self.merged_image)
----------------------------------------

File: /home/jh/Desktop/Local_Python/IMAGE_PHOTO_SCRIPTS_APPS/thumbnailer_version.py
Name: display_merged_image
Type: Function
Description: No description available
Code:
    def display_merged_image(self, image):
        img = image.resize((800, 600))
        tk_img = ImageTk.PhotoImage(img)
        self.canvas.create_image(400, 300, anchor=tk.CENTER, image=tk_img)
        self.canvas.image = tk_img  # Keep a reference to avoid garbage collection
----------------------------------------

File: /home/jh/Desktop/Local_Python/IMAGE_PHOTO_SCRIPTS_APPS/thumbnailer_version.py
Name: build_sprite_sheet
Type: Function
Description: No description available
Code:
    def build_sprite_sheet(self):
        if not self.selected_images:
            messagebox.showwarning("No Images", "Select images to create a sprite sheet.")
            return

        try:
            columns = simpledialog.askinteger("Columns", "Enter number of columns:", minvalue=1)
            if not columns:
                return

            rows = (len(self.selected_images) + columns - 1) // columns
            img_width, img_height = Image.open(self.selected_images[0]).size

            self.sprite_sheet = Image.new('RGBA', (img_width * columns, img_height * rows))
            for idx, img_path in enumerate(self.selected_images):
                img = Image.open(img_path)
                row, col = divmod(idx, columns)
                self.sprite_sheet.paste(img, (col * img_width, row * img_height))

            self.display_merged_image(self.sprite_sheet)
            messagebox.showinfo("Sprite Sheet Complete", "Sprite sheet built successfully.")
        except Exception as e:
            messagebox.showerror("Error", str(e))
----------------------------------------

File: /home/jh/Desktop/Local_Python/IMAGE_PHOTO_SCRIPTS_APPS/thumb_version.py
Name: ImageThumbnailViewer
Type: Class
Description: No description available
Code:
class ImageThumbnailViewer(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title("Image Thumbnail Viewer")
        self.geometry("1200x800")
        
        # Frame for directory selection and view options
        self.frame_top = tk.Frame(self)
        self.frame_top.pack(fill=tk.X, padx=10, pady=10)

        self.btn_browse = tk.Button(self.frame_top, text="Select Directory", command=self.browse_directory)
        self.btn_browse.pack(side=tk.LEFT, padx=5)

        self.var_recursive = tk.BooleanVar()
        self.check_recursive = tk.Checkbutton(
            self.frame_top, text="Recursive View", variable=self.var_recursive, command=self.update_view
        )
        self.check_recursive.pack(side=tk.LEFT, padx=5)

        # Canvas for thumbnails
        self.canvas = tk.Canvas(self, bg="white")
        self.canvas.pack(side=tk.TOP, fill=tk.BOTH, expand=True)

        self.scroll_y = tk.Scrollbar(self, orient="vertical", command=self.canvas.yview)
        self.scroll_y.pack(side=tk.RIGHT, fill=tk.Y)
        self.canvas.config(yscrollcommand=self.scroll_y.set)

        # Frame to hold thumbnails inside the canvas
        self.frame_thumbnails = tk.Frame(self.canvas)
        self.canvas.create_window((0, 0), window=self.frame_thumbnails, anchor="nw")

        self.image_paths = []

    def browse_directory(self):
        directory = filedialog.askdirectory()
        if not directory:
            return

        self.image_paths.clear()
        self.canvas.delete("all")
        self.frame_thumbnails.destroy()
        self.frame_thumbnails = tk.Frame(self.canvas)
        self.canvas.create_window((0, 0), window=self.frame_thumbnails, anchor="nw")

        self.load_images(directory)

    def load_images(self, directory):
        extensions = ('*.png', '*.jpg', '*.jpeg', '*.bmp', '*.gif', '*.tiff')
        search_pattern = '**/*' if self.var_recursive.get() else '*'

        # Get image files based on recursive or flat view
        for ext in extensions:
            self.image_paths.extend(glob(os.path.join(directory, search_pattern, ext), recursive=self.var_recursive.get()))

        if not self.image_paths:
            messagebox.showinfo("No Images Found", "No images found in the selected directory.")
            return

        self.display_thumbnails()

    def display_thumbnails(self):
        for idx, img_path in enumerate(self.image_paths):
            try:
                img = Image.open(img_path)
                img.thumbnail((100, 100))
                tk_img = ImageTk.PhotoImage(img)

                frame = tk.Frame(self.frame_thumbnails, bd=2, relief="ridge")
                frame.grid(row=idx//6, column=idx%6, padx=5, pady=5)

                lbl_img = tk.Label(frame, image=tk_img)
                lbl_img.image = tk_img  # Keep a reference to avoid garbage collection
                lbl_img.pack()

                # Display image name and info
                img_name = os.path.basename(img_path)
                img_size = os.path.getsize(img_path) / 1024  # in KB
                last_modified = time.ctime(os.path.getmtime(img_path))

                lbl_info = tk.Label(frame, text=f"{img_name}\n{img_size:.2f} KB", wraplength=100, anchor="w")
                lbl_info.pack(fill=tk.X)

                lbl_img.bind("<Button-1>", lambda e, path=img_path: self.show_image_info(path))

            except Exception as e:
                print(f"Error loading image {img_path}: {e}")

        self.frame_thumbnails.update_idletasks()
        self.canvas.config(scrollregion=self.canvas.bbox("all"))

    def show_image_info(self, img_path):
        img_size = os.path.getsize(img_path) / 1024  # in KB
        last_modified = time.ctime(os.path.getmtime(img_path))

        messagebox.showinfo(
            "Image Info",
            f"Path: {img_path}\nSize: {img_size:.2f} KB\nLast Modified: {last_modified}"
        )

    def update_view(self):
        self.browse_directory()
----------------------------------------

File: /home/jh/Desktop/Local_Python/IMAGE_PHOTO_SCRIPTS_APPS/thumb_version.py
Name: __init__
Type: Function
Description: No description available
Code:
    def __init__(self):
        super().__init__()
        self.title("Image Thumbnail Viewer")
        self.geometry("1200x800")
        
        # Frame for directory selection and view options
        self.frame_top = tk.Frame(self)
        self.frame_top.pack(fill=tk.X, padx=10, pady=10)

        self.btn_browse = tk.Button(self.frame_top, text="Select Directory", command=self.browse_directory)
        self.btn_browse.pack(side=tk.LEFT, padx=5)

        self.var_recursive = tk.BooleanVar()
        self.check_recursive = tk.Checkbutton(
            self.frame_top, text="Recursive View", variable=self.var_recursive, command=self.update_view
        )
        self.check_recursive.pack(side=tk.LEFT, padx=5)

        # Canvas for thumbnails
        self.canvas = tk.Canvas(self, bg="white")
        self.canvas.pack(side=tk.TOP, fill=tk.BOTH, expand=True)

        self.scroll_y = tk.Scrollbar(self, orient="vertical", command=self.canvas.yview)
        self.scroll_y.pack(side=tk.RIGHT, fill=tk.Y)
        self.canvas.config(yscrollcommand=self.scroll_y.set)

        # Frame to hold thumbnails inside the canvas
        self.frame_thumbnails = tk.Frame(self.canvas)
        self.canvas.create_window((0, 0), window=self.frame_thumbnails, anchor="nw")

        self.image_paths = []
----------------------------------------

File: /home/jh/Desktop/Local_Python/IMAGE_PHOTO_SCRIPTS_APPS/thumb_version.py
Name: browse_directory
Type: Function
Description: No description available
Code:
    def browse_directory(self):
        directory = filedialog.askdirectory()
        if not directory:
            return

        self.image_paths.clear()
        self.canvas.delete("all")
        self.frame_thumbnails.destroy()
        self.frame_thumbnails = tk.Frame(self.canvas)
        self.canvas.create_window((0, 0), window=self.frame_thumbnails, anchor="nw")

        self.load_images(directory)
----------------------------------------

File: /home/jh/Desktop/Local_Python/IMAGE_PHOTO_SCRIPTS_APPS/thumb_version.py
Name: load_images
Type: Function
Description: No description available
Code:
    def load_images(self, directory):
        extensions = ('*.png', '*.jpg', '*.jpeg', '*.bmp', '*.gif', '*.tiff')
        search_pattern = '**/*' if self.var_recursive.get() else '*'

        # Get image files based on recursive or flat view
        for ext in extensions:
            self.image_paths.extend(glob(os.path.join(directory, search_pattern, ext), recursive=self.var_recursive.get()))

        if not self.image_paths:
            messagebox.showinfo("No Images Found", "No images found in the selected directory.")
            return

        self.display_thumbnails()
----------------------------------------

File: /home/jh/Desktop/Local_Python/IMAGE_PHOTO_SCRIPTS_APPS/thumb_version.py
Name: display_thumbnails
Type: Function
Description: No description available
Code:
    def display_thumbnails(self):
        for idx, img_path in enumerate(self.image_paths):
            try:
                img = Image.open(img_path)
                img.thumbnail((100, 100))
                tk_img = ImageTk.PhotoImage(img)

                frame = tk.Frame(self.frame_thumbnails, bd=2, relief="ridge")
                frame.grid(row=idx//6, column=idx%6, padx=5, pady=5)

                lbl_img = tk.Label(frame, image=tk_img)
                lbl_img.image = tk_img  # Keep a reference to avoid garbage collection
                lbl_img.pack()

                # Display image name and info
                img_name = os.path.basename(img_path)
                img_size = os.path.getsize(img_path) / 1024  # in KB
                last_modified = time.ctime(os.path.getmtime(img_path))

                lbl_info = tk.Label(frame, text=f"{img_name}\n{img_size:.2f} KB", wraplength=100, anchor="w")
                lbl_info.pack(fill=tk.X)

                lbl_img.bind("<Button-1>", lambda e, path=img_path: self.show_image_info(path))

            except Exception as e:
                print(f"Error loading image {img_path}: {e}")

        self.frame_thumbnails.update_idletasks()
        self.canvas.config(scrollregion=self.canvas.bbox("all"))
----------------------------------------

File: /home/jh/Desktop/Local_Python/IMAGE_PHOTO_SCRIPTS_APPS/thumb_version.py
Name: show_image_info
Type: Function
Description: No description available
Code:
    def show_image_info(self, img_path):
        img_size = os.path.getsize(img_path) / 1024  # in KB
        last_modified = time.ctime(os.path.getmtime(img_path))

        messagebox.showinfo(
            "Image Info",
            f"Path: {img_path}\nSize: {img_size:.2f} KB\nLast Modified: {last_modified}"
        )
----------------------------------------

File: /home/jh/Desktop/Local_Python/IMAGE_PHOTO_SCRIPTS_APPS/thumb_version.py
Name: update_view
Type: Function
Description: No description available
Code:
    def update_view(self):
        self.browse_directory()
----------------------------------------

File: /home/jh/Desktop/Local_Python/IMAGE_PHOTO_SCRIPTS_APPS/thumbnailerv4.py
Name: ImageToolApp
Type: Class
Description: No description available
Code:
class ImageToolApp(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title("Image Tool Suite")
        self.geometry("1400x800")

        # Initialize attributes
        self.image_paths = []
        self.selected_images = []
        self.current_img_path = None

        # Top frame for options
        self.frame_top = tk.Frame(self)
        self.frame_top.grid(row=0, column=0, columnspan=2, sticky="ew", padx=10, pady=10)

        self.btn_browse = tk.Button(self.frame_top, text="Select Directory", command=self.browse_directory)
        self.btn_browse.grid(row=0, column=0, padx=5)

        self.var_recursive = tk.BooleanVar()
        self.check_recursive = tk.Checkbutton(
            self.frame_top, text="Recursive View", variable=self.var_recursive, command=self.update_view
        )
        self.check_recursive.grid(row=0, column=1, padx=5)

        self.btn_view_full = tk.Button(self.frame_top, text="View Full Image", command=self.view_full_image)
        self.btn_view_full.grid(row=0, column=2, padx=5)

        self.btn_unselect = tk.Button(self.frame_top, text="Unselect", command=self.unselect_image)
        self.btn_unselect.grid(row=0, column=3, padx=5)

        self.btn_merge = tk.Button(self.frame_top, text="Merge Images", command=self.merge_images)
        self.btn_merge.grid(row=0, column=4, padx=5)

        self.btn_sprite = tk.Button(self.frame_top, text="Build Sprite Sheet", command=self.build_sprite_sheet)
        self.btn_sprite.grid(row=0, column=5, padx=5)

        # Frame for thumbnails
        self.frame_left = tk.Frame(self)
        self.frame_left.grid(row=1, column=0, sticky="nsew", padx=10, pady=10)

        # Canvas for thumbnails
        self.canvas = tk.Canvas(self.frame_left, bg="white", bd=11)
        self.canvas.grid(row=0, column=0, sticky="nsew")

        self.scroll_y = tk.Scrollbar(self.frame_left, orient="vertical", command=self.canvas.yview)
        self.scroll_y.grid(row=0, column=1, sticky="ns")
        self.canvas.config(yscrollcommand=self.scroll_y.set)

        # Frame to hold thumbnails inside the canvas
        self.frame_thumbnails = tk.Frame(self.canvas)
        self.canvas.create_window((0, 0), window=self.frame_thumbnails, anchor="nw")
        self.progress_label = tk.Label(self.frame_left,text="Below if loading  please wait...").grid(row=1,column=0)
        # Progress bar for loading indication
        self.progress_bar = ttk.Progressbar(self.frame_left, orient="horizontal", length=400, mode="determinate")
        self.progress_bar.grid(row=3, column=0, columnspan=2, pady=5, sticky="ew")

        # Frame for file info
        self.frame_right = tk.Frame(self, width=300)
        self.frame_right.grid(row=1, column=1, sticky="nsew", padx=10, pady=10)

        self.lbl_info = tk.Label(self.frame_right, text="File Info", anchor="w")
        self.lbl_info.grid(row=0, column=0, sticky="w", pady=5)

        self.txt_info = tk.Text(self.frame_right, height=8, width=40, wrap="word")
        self.txt_info.grid(row=1, column=0, sticky="nsew")

        self.lbl_selected = tk.Label(self.frame_right, text="Selected Images")
        self.lbl_selected.grid(row=2, column=0, sticky="w", pady=5)

        self.listbox_selected = tk.Listbox(self.frame_right, height=15, width=40)
        self.listbox_selected.grid(row=3, column=0, sticky="nsew")

        # Grid weight configuration
        self.grid_rowconfigure(1, weight=1)
        self.grid_columnconfigure(0, weight=1)
        self.frame_left.grid_rowconfigure(0, weight=1)
        self.frame_left.grid_columnconfigure(0, weight=1)
        self.frame_right.grid_rowconfigure(1, weight=1)

    def browse_directory(self):
        directory = filedialog.askdirectory()
        if not directory:
            return

        self.image_paths.clear()
        self.canvas.delete("all")
        self.frame_thumbnails.destroy()
        self.frame_thumbnails = tk.Frame(self.canvas)
        self.canvas.create_window((0, 0), window=self.frame_thumbnails, anchor="nw")

        self.load_images(directory)

    def load_images(self, directory):
        extensions = ('*.png', '*.jpg', '*.jpeg', '*.bmp', '*.gif', '*.tiff')
        search_pattern = '**/*' if self.var_recursive.get() else '*'

        self.image_paths = []
        for ext in extensions:
            self.image_paths.extend(glob(os.path.join(directory, search_pattern, ext), recursive=self.var_recursive.get()))

        if not self.image_paths:
            messagebox.showinfo("No Images Found", "No images found in the selected directory.")
            return

        self.display_thumbnails()

    def display_thumbnails(self):
        self.progress_bar["maximum"] = len(self.image_paths)
        for idx, img_path in enumerate(self.image_paths):
            try:
                img = Image.open(img_path)
                img.thumbnail((100, 100))
                tk_img = ImageTk.PhotoImage(img)

                frame = tk.Frame(self.frame_thumbnails, bd=2, relief="ridge")
                frame.grid(row=idx // 6, column=idx % 6, padx=5, pady=5)

                lbl_img = tk.Label(frame, image=tk_img)
                lbl_img.image = tk_img  # Keep a reference to avoid garbage collection
                lbl_img.grid(row=0, column=0)

                lbl_info = tk.Label(frame, text=os.path.basename(img_path), wraplength=100, anchor="w")
                lbl_info.grid(row=1, column=0, sticky="ew")

                lbl_img.bind("<Double-1>", lambda e, path=img_path: self.select_image(path))
                lbl_img.bind("<Enter>", lambda e, path=img_path: self.show_file_info(path))

                # Update the progress bar
                self.progress_bar.step(1)
                self.progress_bar.update_idletasks()

            except Exception as e:
                print(f"Error loading image {img_path}: {e}")

        self.frame_thumbnails.update_idletasks()
        self.canvas.config(scrollregion=self.canvas.bbox("all"))
        self.progress_bar["value"] = 0  # Reset the progress bar

    def select_image(self, img_path):
        self.show_file_info(img_path)

    def show_file_info(self, img_path):
        file_size = os.path.getsize(img_path) / 1024  # File size in KB
        last_modified = time.ctime(os.path.getmtime(img_path))

        info_text = (
            f"Path: {img_path}\n"
            f"Size: {file_size:.2f} KB\n"
            f"Last Modified: {last_modified}"
        )

        self.txt_info.delete(1.0, tk.END)
        self.txt_info.insert(tk.END, info_text)
        self.current_img_path = img_path

        if img_path not in self.selected_images:
            self.selected_images.append(img_path)
            self.listbox_selected.insert(tk.END, os.path.basename(img_path))

    def unselect_image(self):
        selected_idx = self.listbox_selected.curselection()
        if not selected_idx:
            messagebox.showwarning("No Selection", "Select an image to unselect.")
            return

        selected_file = self.listbox_selected.get(selected_idx)
        self.listbox_selected.delete(selected_idx)
        self.selected_images = [img for img in self.selected_images if os.path.basename(img) != selected_file]

    def view_full_image(self):
        if not self.current_img_path:
            messagebox.showwarning("No Image Selected", "Select an image to view.")
            return

        try:
            img = Image.open(self.current_img_path)
            top = tk.Toplevel(self)
            top.title("Full Image View")

            tk_img = ImageTk.PhotoImage(img)
            lbl_full_img = tk.Label(top, image=tk_img)
            lbl_full_img.image = tk_img  # Keep a reference
            lbl_full_img.pack()

        except Exception as e:
            messagebox.showerror("Error", f"Error opening image: {e}")

    def merge_images(self):
        if len(self.selected_images) < 2:
            messagebox.showwarning("Not Enough Images", "Select at least two images to merge.")
            return

        images = [Image.open(img) for img in self.selected_images]
        total_width = sum(img.width for img in images)
        max_height = max(img.height for img in images)

        merged_image = Image.new('RGB', (total_width, max_height))
        x_offset = 0

        for img in images:
            merged_image.paste(img, (x_offset, 0))
            x_offset += img.width

        self.display_merged_image(merged_image)

    def display_merged_image(self, image):
        img = image.resize((800, 600))
        tk_img = ImageTk.PhotoImage(img)
        self.canvas.create_image(400, 300, anchor=tk.CENTER, image=tk_img)
        self.canvas.image = tk_img  # Keep a reference to avoid garbage collection

    def build_sprite_sheet(self):
        if not self.selected_images:
            messagebox.showwarning("No Images", "Select images to create a sprite sheet.")
            return

        try:
            columns = simpledialog.askinteger("Columns", "Enter number of columns:", minvalue=1)
            if not columns:
                return

            rows = (len(self.selected_images) + columns - 1) // columns
            img_width, img_height = Image.open(self.selected_images[0]).size

            sprite_sheet = Image.new('RGBA', (img_width * columns, img_height * rows))
            for idx, img_path in enumerate(self.selected_images):
                img = Image.open(img_path)
                row, col = divmod(idx, columns)
                sprite_sheet.paste(img, (col * img_width, row * img_height))

            self.display_merged_image(sprite_sheet)
            messagebox.showinfo("Sprite Sheet Complete", "Sprite sheet built successfully.")
        except Exception as e:
            messagebox.showerror("Error", str(e))

    def update_view(self):
        self.browse_directory()
----------------------------------------

File: /home/jh/Desktop/Local_Python/IMAGE_PHOTO_SCRIPTS_APPS/thumbnailerv4.py
Name: __init__
Type: Function
Description: No description available
Code:
    def __init__(self):
        super().__init__()
        self.title("Image Tool Suite")
        self.geometry("1400x800")

        # Initialize attributes
        self.image_paths = []
        self.selected_images = []
        self.current_img_path = None

        # Top frame for options
        self.frame_top = tk.Frame(self)
        self.frame_top.grid(row=0, column=0, columnspan=2, sticky="ew", padx=10, pady=10)

        self.btn_browse = tk.Button(self.frame_top, text="Select Directory", command=self.browse_directory)
        self.btn_browse.grid(row=0, column=0, padx=5)

        self.var_recursive = tk.BooleanVar()
        self.check_recursive = tk.Checkbutton(
            self.frame_top, text="Recursive View", variable=self.var_recursive, command=self.update_view
        )
        self.check_recursive.grid(row=0, column=1, padx=5)

        self.btn_view_full = tk.Button(self.frame_top, text="View Full Image", command=self.view_full_image)
        self.btn_view_full.grid(row=0, column=2, padx=5)

        self.btn_unselect = tk.Button(self.frame_top, text="Unselect", command=self.unselect_image)
        self.btn_unselect.grid(row=0, column=3, padx=5)

        self.btn_merge = tk.Button(self.frame_top, text="Merge Images", command=self.merge_images)
        self.btn_merge.grid(row=0, column=4, padx=5)

        self.btn_sprite = tk.Button(self.frame_top, text="Build Sprite Sheet", command=self.build_sprite_sheet)
        self.btn_sprite.grid(row=0, column=5, padx=5)

        # Frame for thumbnails
        self.frame_left = tk.Frame(self)
        self.frame_left.grid(row=1, column=0, sticky="nsew", padx=10, pady=10)

        # Canvas for thumbnails
        self.canvas = tk.Canvas(self.frame_left, bg="white", bd=11)
        self.canvas.grid(row=0, column=0, sticky="nsew")

        self.scroll_y = tk.Scrollbar(self.frame_left, orient="vertical", command=self.canvas.yview)
        self.scroll_y.grid(row=0, column=1, sticky="ns")
        self.canvas.config(yscrollcommand=self.scroll_y.set)

        # Frame to hold thumbnails inside the canvas
        self.frame_thumbnails = tk.Frame(self.canvas)
        self.canvas.create_window((0, 0), window=self.frame_thumbnails, anchor="nw")
        self.progress_label = tk.Label(self.frame_left,text="Below if loading  please wait...").grid(row=1,column=0)
        # Progress bar for loading indication
        self.progress_bar = ttk.Progressbar(self.frame_left, orient="horizontal", length=400, mode="determinate")
        self.progress_bar.grid(row=3, column=0, columnspan=2, pady=5, sticky="ew")

        # Frame for file info
        self.frame_right = tk.Frame(self, width=300)
        self.frame_right.grid(row=1, column=1, sticky="nsew", padx=10, pady=10)

        self.lbl_info = tk.Label(self.frame_right, text="File Info", anchor="w")
        self.lbl_info.grid(row=0, column=0, sticky="w", pady=5)

        self.txt_info = tk.Text(self.frame_right, height=8, width=40, wrap="word")
        self.txt_info.grid(row=1, column=0, sticky="nsew")

        self.lbl_selected = tk.Label(self.frame_right, text="Selected Images")
        self.lbl_selected.grid(row=2, column=0, sticky="w", pady=5)

        self.listbox_selected = tk.Listbox(self.frame_right, height=15, width=40)
        self.listbox_selected.grid(row=3, column=0, sticky="nsew")

        # Grid weight configuration
        self.grid_rowconfigure(1, weight=1)
        self.grid_columnconfigure(0, weight=1)
        self.frame_left.grid_rowconfigure(0, weight=1)
        self.frame_left.grid_columnconfigure(0, weight=1)
        self.frame_right.grid_rowconfigure(1, weight=1)
----------------------------------------

File: /home/jh/Desktop/Local_Python/IMAGE_PHOTO_SCRIPTS_APPS/thumbnailerv4.py
Name: browse_directory
Type: Function
Description: No description available
Code:
    def browse_directory(self):
        directory = filedialog.askdirectory()
        if not directory:
            return

        self.image_paths.clear()
        self.canvas.delete("all")
        self.frame_thumbnails.destroy()
        self.frame_thumbnails = tk.Frame(self.canvas)
        self.canvas.create_window((0, 0), window=self.frame_thumbnails, anchor="nw")

        self.load_images(directory)
----------------------------------------

File: /home/jh/Desktop/Local_Python/IMAGE_PHOTO_SCRIPTS_APPS/thumbnailerv4.py
Name: load_images
Type: Function
Description: No description available
Code:
    def load_images(self, directory):
        extensions = ('*.png', '*.jpg', '*.jpeg', '*.bmp', '*.gif', '*.tiff')
        search_pattern = '**/*' if self.var_recursive.get() else '*'

        self.image_paths = []
        for ext in extensions:
            self.image_paths.extend(glob(os.path.join(directory, search_pattern, ext), recursive=self.var_recursive.get()))

        if not self.image_paths:
            messagebox.showinfo("No Images Found", "No images found in the selected directory.")
            return

        self.display_thumbnails()
----------------------------------------

File: /home/jh/Desktop/Local_Python/IMAGE_PHOTO_SCRIPTS_APPS/thumbnailerv4.py
Name: display_thumbnails
Type: Function
Description: No description available
Code:
    def display_thumbnails(self):
        self.progress_bar["maximum"] = len(self.image_paths)
        for idx, img_path in enumerate(self.image_paths):
            try:
                img = Image.open(img_path)
                img.thumbnail((100, 100))
                tk_img = ImageTk.PhotoImage(img)

                frame = tk.Frame(self.frame_thumbnails, bd=2, relief="ridge")
                frame.grid(row=idx // 6, column=idx % 6, padx=5, pady=5)

                lbl_img = tk.Label(frame, image=tk_img)
                lbl_img.image = tk_img  # Keep a reference to avoid garbage collection
                lbl_img.grid(row=0, column=0)

                lbl_info = tk.Label(frame, text=os.path.basename(img_path), wraplength=100, anchor="w")
                lbl_info.grid(row=1, column=0, sticky="ew")

                lbl_img.bind("<Double-1>", lambda e, path=img_path: self.select_image(path))
                lbl_img.bind("<Enter>", lambda e, path=img_path: self.show_file_info(path))

                # Update the progress bar
                self.progress_bar.step(1)
                self.progress_bar.update_idletasks()

            except Exception as e:
                print(f"Error loading image {img_path}: {e}")

        self.frame_thumbnails.update_idletasks()
        self.canvas.config(scrollregion=self.canvas.bbox("all"))
        self.progress_bar["value"] = 0  # Reset the progress bar
----------------------------------------

File: /home/jh/Desktop/Local_Python/IMAGE_PHOTO_SCRIPTS_APPS/thumbnailerv4.py
Name: select_image
Type: Function
Description: No description available
Code:
    def select_image(self, img_path):
        self.show_file_info(img_path)
----------------------------------------

File: /home/jh/Desktop/Local_Python/IMAGE_PHOTO_SCRIPTS_APPS/thumbnailerv4.py
Name: show_file_info
Type: Function
Description: No description available
Code:
    def show_file_info(self, img_path):
        file_size = os.path.getsize(img_path) / 1024  # File size in KB
        last_modified = time.ctime(os.path.getmtime(img_path))

        info_text = (
            f"Path: {img_path}\n"
            f"Size: {file_size:.2f} KB\n"
            f"Last Modified: {last_modified}"
        )

        self.txt_info.delete(1.0, tk.END)
        self.txt_info.insert(tk.END, info_text)
        self.current_img_path = img_path

        if img_path not in self.selected_images:
            self.selected_images.append(img_path)
            self.listbox_selected.insert(tk.END, os.path.basename(img_path))
----------------------------------------

File: /home/jh/Desktop/Local_Python/IMAGE_PHOTO_SCRIPTS_APPS/thumbnailerv4.py
Name: unselect_image
Type: Function
Description: No description available
Code:
    def unselect_image(self):
        selected_idx = self.listbox_selected.curselection()
        if not selected_idx:
            messagebox.showwarning("No Selection", "Select an image to unselect.")
            return

        selected_file = self.listbox_selected.get(selected_idx)
        self.listbox_selected.delete(selected_idx)
        self.selected_images = [img for img in self.selected_images if os.path.basename(img) != selected_file]
----------------------------------------

File: /home/jh/Desktop/Local_Python/IMAGE_PHOTO_SCRIPTS_APPS/thumbnailerv4.py
Name: view_full_image
Type: Function
Description: No description available
Code:
    def view_full_image(self):
        if not self.current_img_path:
            messagebox.showwarning("No Image Selected", "Select an image to view.")
            return

        try:
            img = Image.open(self.current_img_path)
            top = tk.Toplevel(self)
            top.title("Full Image View")

            tk_img = ImageTk.PhotoImage(img)
            lbl_full_img = tk.Label(top, image=tk_img)
            lbl_full_img.image = tk_img  # Keep a reference
            lbl_full_img.pack()

        except Exception as e:
            messagebox.showerror("Error", f"Error opening image: {e}")
----------------------------------------

File: /home/jh/Desktop/Local_Python/IMAGE_PHOTO_SCRIPTS_APPS/thumbnailerv4.py
Name: merge_images
Type: Function
Description: No description available
Code:
    def merge_images(self):
        if len(self.selected_images) < 2:
            messagebox.showwarning("Not Enough Images", "Select at least two images to merge.")
            return

        images = [Image.open(img) for img in self.selected_images]
        total_width = sum(img.width for img in images)
        max_height = max(img.height for img in images)

        merged_image = Image.new('RGB', (total_width, max_height))
        x_offset = 0

        for img in images:
            merged_image.paste(img, (x_offset, 0))
            x_offset += img.width

        self.display_merged_image(merged_image)
----------------------------------------

File: /home/jh/Desktop/Local_Python/IMAGE_PHOTO_SCRIPTS_APPS/thumbnailerv4.py
Name: display_merged_image
Type: Function
Description: No description available
Code:
    def display_merged_image(self, image):
        img = image.resize((800, 600))
        tk_img = ImageTk.PhotoImage(img)
        self.canvas.create_image(400, 300, anchor=tk.CENTER, image=tk_img)
        self.canvas.image = tk_img  # Keep a reference to avoid garbage collection
----------------------------------------

File: /home/jh/Desktop/Local_Python/IMAGE_PHOTO_SCRIPTS_APPS/thumbnailerv4.py
Name: build_sprite_sheet
Type: Function
Description: No description available
Code:
    def build_sprite_sheet(self):
        if not self.selected_images:
            messagebox.showwarning("No Images", "Select images to create a sprite sheet.")
            return

        try:
            columns = simpledialog.askinteger("Columns", "Enter number of columns:", minvalue=1)
            if not columns:
                return

            rows = (len(self.selected_images) + columns - 1) // columns
            img_width, img_height = Image.open(self.selected_images[0]).size

            sprite_sheet = Image.new('RGBA', (img_width * columns, img_height * rows))
            for idx, img_path in enumerate(self.selected_images):
                img = Image.open(img_path)
                row, col = divmod(idx, columns)
                sprite_sheet.paste(img, (col * img_width, row * img_height))

            self.display_merged_image(sprite_sheet)
            messagebox.showinfo("Sprite Sheet Complete", "Sprite sheet built successfully.")
        except Exception as e:
            messagebox.showerror("Error", str(e))
----------------------------------------

File: /home/jh/Desktop/Local_Python/IMAGE_PHOTO_SCRIPTS_APPS/thumbnailerv4.py
Name: update_view
Type: Function
Description: No description available
Code:
    def update_view(self):
        self.browse_directory()
----------------------------------------